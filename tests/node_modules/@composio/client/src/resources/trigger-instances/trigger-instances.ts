// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import * as HandleAPI from './handle';
import {
  Handle,
  HandleExecuteParams,
  HandleExecuteResponse,
  HandleRetrieveParams,
  HandleRetrieveResponse,
} from './handle';
import * as ManageAPI from './manage';
import { Manage, ManageDeleteResponse, ManageUpdateParams, ManageUpdateResponse } from './manage';
import { APIPromise } from '../../core/api-promise';
import { RequestOptions } from '../../internal/request-options';
import { path } from '../../internal/utils/path';

export class TriggerInstances extends APIResource {
  handle: HandleAPI.Handle = new HandleAPI.Handle(this._client);
  manage: ManageAPI.Manage = new ManageAPI.Manage(this._client);

  listActive(
    query: TriggerInstanceListActiveParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<TriggerInstanceListActiveResponse> {
    return this._client.get('/api/v3/trigger_instances/active', { query, ...options });
  }

  upsert(
    slug: string,
    body: TriggerInstanceUpsertParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<TriggerInstanceUpsertResponse> {
    return this._client.post(path`/api/v3/trigger_instances/${slug}/upsert`, { body, ...options });
  }
}

export interface TriggerInstanceListActiveResponse {
  current_page: number;

  items: Array<TriggerInstanceListActiveResponse.Item>;

  total_items: number;

  total_pages: number;

  next_cursor?: string | null;
}

export namespace TriggerInstanceListActiveResponse {
  export interface Item {
    /**
     * Nano ID of the trigger instance
     */
    id: string;

    /**
     * ID of the connected account this trigger is associated with
     */
    connected_account_id: string;

    /**
     * UUID of the connected account this trigger is associated with
     */
    connected_account_uuid: string;

    /**
     * ISO 8601 timestamp when the trigger instance was disabled, if applicable
     */
    disabled_at: string | null;

    /**
     * ID of the user who disabled the trigger instance, if applicable
     */
    disabledAt: string | null;

    /**
     * State of the trigger instance
     */
    state: { [key: string]: unknown };

    /**
     * Configuration for the trigger
     */
    trigger_config: { [key: string]: unknown };

    /**
     * Name of the trigger
     */
    trigger_name: string;

    /**
     * ISO 8601 timestamp when the trigger instance was updated
     */
    updated_at: string;

    /**
     * ID of the user this trigger is associated with
     */
    user_id: string;

    /**
     * Deprecated fields for the trigger instance
     */
    deprecated?: Item.Deprecated;

    /**
     * Additional data associated with the trigger instance
     */
    trigger_data?: string;

    /**
     * Unique identifier of the trigger instance
     */
    uuid?: string;
  }

  export namespace Item {
    /**
     * Deprecated fields for the trigger instance
     */
    export interface Deprecated {
      /**
       * Deprecated created_at for the trigger instance
       */
      createdAt: string;
    }
  }
}

export interface TriggerInstanceUpsertResponse {
  deprecated: TriggerInstanceUpsertResponse.Deprecated;

  /**
   * ID of the updated trigger
   */
  trigger_id: string;
}

export namespace TriggerInstanceUpsertResponse {
  export interface Deprecated {
    /**
     * ID of the updated trigger
     */
    uuid: string;
  }
}

export interface TriggerInstanceListActiveParams {
  /**
   * Array of auth config IDs to filter triggers by
   */
  auth_config_ids?: Array<string> | null;

  authConfigIds?: string;

  /**
   * Array of connected account IDs to filter triggers by
   */
  connected_account_ids?: Array<string> | null;

  connectedAccountIds?: string;

  /**
   * Cursor for pagination. The cursor is a base64 encoded string of the page and
   * limit. The page is the page number and the limit is the number of items per
   * page. The cursor is used to paginate through the items. The cursor is not
   * required for the first page.
   */
  cursor?: string;

  /**
   * Array of auth config UUIDs to filter triggers by
   */
  deprecatedAuthConfigUuids?: Array<string> | null;

  /**
   * Array of connected account UUIDs to filter triggers by
   */
  deprecatedConnectedAccountUuids?: Array<string> | null;

  /**
   * Number of items per page
   */
  limit?: number | null;

  /**
   * Page number for pagination. Starts from 1.
   */
  page?: number;

  /**
   * When set to true, includes disabled triggers in the response.
   */
  show_disabled?: boolean | null;

  showDisabled?: string;

  /**
   * Array of trigger IDs to filter triggers by
   */
  trigger_ids?: Array<string> | null;

  /**
   * Array of trigger names to filter triggers by
   */
  trigger_names?: Array<string> | null;

  triggerIds?: string;

  triggerNames?: string;
}

export interface TriggerInstanceUpsertParams {
  /**
   * Connected account nanoid
   */
  connected_account_id?: string;

  /**
   * Trigger configuration
   */
  trigger_config?: { [key: string]: unknown };

  /**
   * Trigger configuration (deprecated)
   */
  triggerConfig?: { [key: string]: unknown };
}

TriggerInstances.Handle = Handle;
TriggerInstances.Manage = Manage;

export declare namespace TriggerInstances {
  export {
    type TriggerInstanceListActiveResponse as TriggerInstanceListActiveResponse,
    type TriggerInstanceUpsertResponse as TriggerInstanceUpsertResponse,
    type TriggerInstanceListActiveParams as TriggerInstanceListActiveParams,
    type TriggerInstanceUpsertParams as TriggerInstanceUpsertParams,
  };

  export {
    Handle as Handle,
    type HandleRetrieveResponse as HandleRetrieveResponse,
    type HandleExecuteResponse as HandleExecuteResponse,
    type HandleRetrieveParams as HandleRetrieveParams,
    type HandleExecuteParams as HandleExecuteParams,
  };

  export {
    Manage as Manage,
    type ManageUpdateResponse as ManageUpdateResponse,
    type ManageDeleteResponse as ManageDeleteResponse,
    type ManageUpdateParams as ManageUpdateParams,
  };
}
