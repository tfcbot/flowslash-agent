// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import { APIPromise } from '../core/api-promise';
import { RequestOptions } from '../internal/request-options';

export class Files extends APIResource {
  /**
   * Retrieves a list of files associated with the authenticated project. Results can
   * be filtered by toolkit and tool slugs.
   *
   * @example
   * ```ts
   * const files = await client.files.list();
   * ```
   */
  list(
    query: FileListParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<FileListResponse> {
    return this._client.get('/api/v3/files/list', { query, ...options });
  }

  /**
   * Generates a presigned URL for uploading a file to S3. This endpoint handles
   * deduplication by checking if a file with the same MD5 hash already exists.
   *
   * @example
   * ```ts
   * const response = await client.files.createPresignedURL({
   *   filename: 'photo.jpg',
   *   md5: 'd41d8cd98f00b204e9800998ecf8427e',
   *   mimetype: 'image/jpeg',
   *   tool_slug: 'resize-image',
   *   toolkit_slug: 'image-processing',
   * });
   * ```
   */
  createPresignedURL(
    body: FileCreatePresignedURLParams,
    options?: RequestOptions,
  ): APIPromise<FileCreatePresignedURLResponse> {
    return this._client.post('/api/v3/files/upload/request', { body, ...options });
  }
}

export interface FileListResponse {
  current_page: number;

  items: Array<FileListResponse.Item>;

  total_items: number;

  total_pages: number;

  next_cursor?: string | null;
}

export namespace FileListResponse {
  export interface Item {
    /**
     * Name of the original file. Example: "document.docx"
     */
    filename: string;

    /**
     * MD5 hash of the file for integrity verification. Example:
     * "d41d8cd98f00b204e9800998ecf8427e"
     */
    md5: string;

    /**
     * Mime type of the original file. Example:
     * "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
     */
    mimetype: string;

    /**
     * Slug of the action where this file belongs to. Example: "convert-to-pdf"
     */
    tool_slug: string;

    /**
     * Slug of the app where this file belongs to. Example: "file-converter"
     */
    toolkit_slug: string;
  }
}

export type FileCreatePresignedURLResponse =
  | FileCreatePresignedURLResponse.UnionMember0
  | FileCreatePresignedURLResponse.UnionMember1
  | FileCreatePresignedURLResponse.UnionMember2;

export namespace FileCreatePresignedURLResponse {
  export interface UnionMember0 {
    /**
     * ID of the request file. Example: "f1e2d3c4b5a6"
     */
    id: string;

    /**
     * URL of the existing request file. Example:
     * "https://storage.example.com/projects/123/files/photo-1234.jpg"
     */
    existing_url: string;

    /**
     * [DEPRECATED] Use existing_url instead. URL of the existing request file.
     * Example: "https://storage.example.com/projects/123/files/photo-1234.jpg"
     */
    existingUrl: string;

    /**
     * S3 upload location. Example: "projects/123/files/photo-1234.jpg"
     */
    key: string;

    /**
     * Indicates the file already exists and does not need to be uploaded again
     */
    type: 'existing';
  }

  export interface UnionMember1 {
    /**
     * ID of the request file. Example: "f1e2d3c4b5a6"
     */
    id: string;

    /**
     * S3 upload location. Example: "projects/123/files/photo-1234.jpg"
     */
    key: string;

    /**
     * Presigned URL for upload. Example:
     * "https://storage.example.com/projects/123/files/photo-1234.jpg?X-Amz-Algorithm=..."
     */
    new_presigned_url: string;

    /**
     * [DEPRECATED] Use new_presigned_url instead. Presigned URL for upload. Example:
     * "https://storage.example.com/projects/123/files/photo-1234.jpg?X-Amz-Algorithm=..."
     */
    newPresignedUrl: string;

    /**
     * Indicates this is a new file that needs to be uploaded
     */
    type: 'new';
  }

  export interface UnionMember2 {
    /**
     * ID of the request file. Example: "f1e2d3c4b5a6"
     */
    id: string;

    /**
     * S3 upload location. Example: "projects/123/files/photo-1234.jpg"
     */
    key: string;

    /**
     * Indicates this file exists but needs to be updated with a new version
     */
    type: 'update';

    /**
     * Presigned URL for upload. Example:
     * "https://storage.example.com/projects/123/files/photo-1234.jpg?X-Amz-Algorithm=..."
     */
    update_presigned_url: string;

    /**
     * [DEPRECATED] Use update_presigned_url instead. Presigned URL for upload.
     * Example:
     * "https://storage.example.com/projects/123/files/photo-1234.jpg?X-Amz-Algorithm=..."
     */
    updatePresignedUrl: string;
  }
}

export interface FileListParams {
  /**
   * Cursor for pagination. The cursor is a base64 encoded string of the page and
   * limit. The page is the page number and the limit is the number of items per
   * page. The cursor is used to paginate through the items. The cursor is not
   * required for the first page.
   */
  cursor?: string;

  /**
   * Number of items per page
   */
  limit?: number | null;

  /**
   * Filter files by action slug. Example: "convert-to-pdf"
   */
  tool_slug?: string;

  /**
   * Filter files by app slug. Example: "file-converter"
   */
  toolkit_slug?: string;
}

export interface FileCreatePresignedURLParams {
  /**
   * Name of the original file. Example: "photo.jpg"
   */
  filename: string;

  /**
   * MD5 hash of the file for deduplication and integrity verification. Example:
   * "d41d8cd98f00b204e9800998ecf8427e"
   */
  md5: string;

  /**
   * Mime type of the original file. Example: "image/jpeg"
   */
  mimetype: string;

  /**
   * Slug of the action where this file belongs to. Example: "resize-image"
   */
  tool_slug: string;

  /**
   * Slug of the app where this file belongs to. Example: "image-processing"
   */
  toolkit_slug: string;
}

export declare namespace Files {
  export {
    type FileListResponse as FileListResponse,
    type FileCreatePresignedURLResponse as FileCreatePresignedURLResponse,
    type FileListParams as FileListParams,
    type FileCreatePresignedURLParams as FileCreatePresignedURLParams,
  };
}
