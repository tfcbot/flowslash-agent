import { APIResource } from "../core/resource.mjs";
import { APIPromise } from "../core/api-promise.mjs";
import { RequestOptions } from "../internal/request-options.mjs";
export declare class AuthConfigs extends APIResource {
    /**
     * Create new authentication configuration
     *
     * @example
     * ```ts
     * const authConfig = await client.authConfigs.create({
     *   toolkit: { slug: 'slug' },
     * });
     * ```
     */
    create(body: AuthConfigCreateParams, options?: RequestOptions): APIPromise<AuthConfigCreateResponse>;
    /**
     * Retrieves detailed information about a specific authentication configuration
     * using its unique identifier.
     *
     * @example
     * ```ts
     * const authConfig = await client.authConfigs.retrieve(
     *   'nanoid',
     * );
     * ```
     */
    retrieve(nanoid: string, options?: RequestOptions): APIPromise<AuthConfigRetrieveResponse>;
    /**
     * Modifies an existing authentication configuration with new credentials or other
     * settings. Only specified fields will be updated.
     *
     * @example
     * ```ts
     * const authConfig = await client.authConfigs.update(
     *   'nanoid',
     *   { credentials: { foo: 'bar' }, type: 'custom' },
     * );
     * ```
     */
    update(nanoid: string, body: AuthConfigUpdateParams, options?: RequestOptions): APIPromise<unknown>;
    /**
     * List authentication configurations with optional filters
     *
     * @example
     * ```ts
     * const authConfigs = await client.authConfigs.list();
     * ```
     */
    list(query?: AuthConfigListParams | null | undefined, options?: RequestOptions): APIPromise<AuthConfigListResponse>;
    /**
     * Soft-deletes an authentication configuration by marking it as deleted in the
     * database. This operation cannot be undone.
     *
     * @example
     * ```ts
     * const authConfig = await client.authConfigs.delete(
     *   'nanoid',
     * );
     * ```
     */
    delete(nanoid: string, options?: RequestOptions): APIPromise<unknown>;
    /**
     * Updates the status of an authentication configuration to either enabled or
     * disabled. Disabled configurations cannot be used for new connections.
     *
     * @example
     * ```ts
     * const response = await client.authConfigs.updateStatus(
     *   'ENABLED',
     *   { nanoid: 'nanoid' },
     * );
     * ```
     */
    updateStatus(status: 'ENABLED' | 'DISABLED', params: AuthConfigUpdateStatusParams, options?: RequestOptions): APIPromise<unknown>;
}
export interface AuthConfigCreateResponse {
    auth_config: AuthConfigCreateResponse.AuthConfig;
    toolkit: AuthConfigCreateResponse.Toolkit;
}
export declare namespace AuthConfigCreateResponse {
    interface AuthConfig {
        /**
         * The auth config id of the toolkit (must be a valid auth config id)
         */
        id: string;
        /**
         * The authentication mode of the toolkit
         */
        auth_scheme: string;
        /**
         * Whether the auth config is managed by Composio
         */
        is_composio_managed: boolean;
        /**
         * The tools that the user can use with the auth config
         */
        restrict_to_following_tools?: Array<string>;
    }
    interface Toolkit {
        /**
         * The unique key of the toolkit
         */
        slug: string;
    }
}
export interface AuthConfigRetrieveResponse {
    /**
     * The unique ID of the authentication configuration
     */
    id: string;
    /**
     * Deprecated parameters maintained for backward compatibility
     */
    deprecated_params: AuthConfigRetrieveResponse.DeprecatedParams;
    /**
     * The display name of the authentication configuration
     */
    name: string;
    /**
     * The number of active connections using this auth config
     */
    no_of_connections: number;
    /**
     * Current status of the authentication configuration
     */
    status: 'ENABLED' | 'DISABLED';
    tool_access_config: AuthConfigRetrieveResponse.ToolAccessConfig;
    /**
     * Information about the associated integration
     */
    toolkit: AuthConfigRetrieveResponse.Toolkit;
    /**
     * The type of the authentication configuration (custom or default)
     */
    type: 'default' | 'custom';
    /**
     * The UUID of the authentication configuration (for backward compatibility)
     */
    uuid: string;
    /**
     * The authentication scheme used (e.g., OAuth2, API Key, etc.)
     */
    auth_scheme?: 'OAUTH2' | 'OAUTH1' | 'API_KEY' | 'BASIC' | 'BILLCOM_AUTH' | 'BEARER_TOKEN' | 'GOOGLE_SERVICE_ACCOUNT' | 'NO_AUTH' | 'BASIC_WITH_JWT' | 'COMPOSIO_LINK' | 'CALCOM_AUTH';
    /**
     * ISO 8601 date-time when the auth config was created
     */
    created_at?: string;
    /**
     * The identifier of the user who created the auth config
     */
    created_by?: string;
    /**
     * The authentication credentials (tokens, keys, etc.) - may be partially hidden
     * for security
     */
    credentials?: {
        [key: string]: unknown;
    };
    /**
     * Fields expected during connection initialization
     */
    expected_input_fields?: Array<unknown>;
    /**
     * Whether this authentication configuration is managed by Composio or the user
     */
    is_composio_managed?: boolean;
    /**
     * ISO 8601 date-time when the auth config was last updated
     */
    last_updated_at?: string;
}
export declare namespace AuthConfigRetrieveResponse {
    /**
     * Deprecated parameters maintained for backward compatibility
     */
    interface DeprecatedParams {
        /**
         * Deprecated: Default connector ID
         */
        default_connector_id: string | null;
        /**
         * Deprecated: Fields expected during connection initialization
         */
        expected_input_fields?: Array<{
            [key: string]: unknown;
        }>;
        /**
         * Deprecated: Member UUID
         */
        member_uuid?: string;
        /**
         * Deprecated: Toolkit ID
         */
        toolkit_id?: string;
    }
    interface ToolAccessConfig {
        /**
         * The actions that the user can perform on the auth config. If passed, this will
         * update the actions that the user can perform on the auth config.
         */
        tools_available_for_execution?: Array<string>;
        /**
         * Tools used to generate the minimum required scopes for the auth config (only
         * valid for OAuth). If passed, this will update the scopes.
         */
        tools_for_connected_account_creation?: Array<string>;
    }
    /**
     * Information about the associated integration
     */
    interface Toolkit {
        /**
         * The URL to the integration app's logo image
         */
        logo: string;
        /**
         * The unique identifier of the integration app
         */
        slug: string;
    }
}
export type AuthConfigUpdateResponse = unknown;
export interface AuthConfigListResponse {
    current_page: number;
    items: Array<AuthConfigListResponse.Item>;
    total_items: number;
    total_pages: number;
    next_cursor?: string | null;
}
export declare namespace AuthConfigListResponse {
    interface Item {
        /**
         * The unique ID of the authentication configuration
         */
        id: string;
        /**
         * Deprecated parameters maintained for backward compatibility
         */
        deprecated_params: Item.DeprecatedParams;
        /**
         * The display name of the authentication configuration
         */
        name: string;
        /**
         * The number of active connections using this auth config
         */
        no_of_connections: number;
        /**
         * Current status of the authentication configuration
         */
        status: 'ENABLED' | 'DISABLED';
        tool_access_config: Item.ToolAccessConfig;
        /**
         * Information about the associated integration
         */
        toolkit: Item.Toolkit;
        /**
         * The type of the authentication configuration (custom or default)
         */
        type: 'default' | 'custom';
        /**
         * The UUID of the authentication configuration (for backward compatibility)
         */
        uuid: string;
        /**
         * The authentication scheme used (e.g., OAuth2, API Key, etc.)
         */
        auth_scheme?: 'OAUTH2' | 'OAUTH1' | 'API_KEY' | 'BASIC' | 'BILLCOM_AUTH' | 'BEARER_TOKEN' | 'GOOGLE_SERVICE_ACCOUNT' | 'NO_AUTH' | 'BASIC_WITH_JWT' | 'COMPOSIO_LINK' | 'CALCOM_AUTH';
        /**
         * ISO 8601 date-time when the auth config was created
         */
        created_at?: string;
        /**
         * The identifier of the user who created the auth config
         */
        created_by?: string;
        /**
         * The authentication credentials (tokens, keys, etc.) - may be partially hidden
         * for security
         */
        credentials?: {
            [key: string]: unknown;
        };
        /**
         * Fields expected during connection initialization
         */
        expected_input_fields?: Array<unknown>;
        /**
         * Whether this authentication configuration is managed by Composio or the user
         */
        is_composio_managed?: boolean;
        /**
         * ISO 8601 date-time when the auth config was last updated
         */
        last_updated_at?: string;
    }
    namespace Item {
        /**
         * Deprecated parameters maintained for backward compatibility
         */
        interface DeprecatedParams {
            /**
             * Deprecated: Default connector ID
             */
            default_connector_id: string | null;
            /**
             * Deprecated: Fields expected during connection initialization
             */
            expected_input_fields?: Array<{
                [key: string]: unknown;
            }>;
            /**
             * Deprecated: Member UUID
             */
            member_uuid?: string;
            /**
             * Deprecated: Toolkit ID
             */
            toolkit_id?: string;
        }
        interface ToolAccessConfig {
            /**
             * The actions that the user can perform on the auth config. If passed, this will
             * update the actions that the user can perform on the auth config.
             */
            tools_available_for_execution?: Array<string>;
            /**
             * Tools used to generate the minimum required scopes for the auth config (only
             * valid for OAuth). If passed, this will update the scopes.
             */
            tools_for_connected_account_creation?: Array<string>;
        }
        /**
         * Information about the associated integration
         */
        interface Toolkit {
            /**
             * The URL to the integration app's logo image
             */
            logo: string;
            /**
             * The unique identifier of the integration app
             */
            slug: string;
        }
    }
}
export type AuthConfigDeleteResponse = unknown;
export type AuthConfigUpdateStatusResponse = unknown;
export interface AuthConfigCreateParams {
    toolkit: AuthConfigCreateParams.Toolkit;
    auth_config?: AuthConfigCreateParams.UnionMember0 | AuthConfigCreateParams.UnionMember1;
}
export declare namespace AuthConfigCreateParams {
    interface Toolkit {
        /**
         * Toolkit slug to create auth config for
         */
        slug: string;
    }
    interface UnionMember0 {
        type: 'use_composio_managed_auth';
        credentials?: {
            [key: string]: string | boolean | number;
        };
        /**
         * The name of the integration
         */
        name?: string;
        tool_access_config?: UnionMember0.ToolAccessConfig;
    }
    namespace UnionMember0 {
        interface ToolAccessConfig {
            /**
             * Tools used to generate the minimum required scopes for the auth config (only
             * valid for OAuth). If passed, this will update the scopes.
             */
            tools_for_connected_account_creation?: Array<string>;
        }
    }
    interface UnionMember1 {
        authScheme: 'OAUTH2' | 'OAUTH1' | 'API_KEY' | 'BASIC' | 'BILLCOM_AUTH' | 'BEARER_TOKEN' | 'GOOGLE_SERVICE_ACCOUNT' | 'NO_AUTH' | 'BASIC_WITH_JWT' | 'COMPOSIO_LINK' | 'CALCOM_AUTH';
        credentials: {
            [key: string]: string | boolean | number;
        };
        type: 'use_custom_auth';
        /**
         * The name of the integration
         */
        name?: string;
        proxy_config?: UnionMember1.ProxyConfig;
        tool_access_config?: UnionMember1.ToolAccessConfig;
    }
    namespace UnionMember1 {
        interface ProxyConfig {
            /**
             * The url of the auth proxy
             */
            proxy_url: string;
            /**
             * The auth key for the auth proxy
             */
            proxy_auth_key?: string;
        }
        interface ToolAccessConfig {
            /**
             * Tools used to generate the minimum required scopes for the auth config (only
             * valid for OAuth). If passed, this will update the scopes.
             */
            tools_for_connected_account_creation?: Array<string>;
        }
    }
}
export type AuthConfigUpdateParams = AuthConfigUpdateParams.Variant0 | AuthConfigUpdateParams.Variant1;
export declare namespace AuthConfigUpdateParams {
    interface Variant0 {
        credentials: {
            [key: string]: unknown;
        };
        type: 'custom';
        tool_access_config?: Variant0.ToolAccessConfig;
    }
    namespace Variant0 {
        interface ToolAccessConfig {
            /**
             * The actions that the user can perform on the auth config. If passed, this will
             * update the actions that the user can perform on the auth config.
             */
            tools_available_for_execution?: Array<string>;
            /**
             * Tools used to generate the minimum required scopes for the auth config (only
             * valid for OAuth). If passed, this will update the scopes.
             */
            tools_for_connected_account_creation?: Array<string>;
        }
    }
    interface Variant1 {
        type: 'default';
        scopes?: string;
        tool_access_config?: Variant1.ToolAccessConfig;
    }
    namespace Variant1 {
        interface ToolAccessConfig {
            /**
             * The actions that the user can perform on the auth config. If passed, this will
             * update the actions that the user can perform on the auth config.
             */
            tools_available_for_execution?: Array<string>;
            /**
             * Tools used to generate the minimum required scopes for the auth config (only
             * valid for OAuth). If passed, this will update the scopes.
             */
            tools_for_connected_account_creation?: Array<string>;
        }
    }
}
export interface AuthConfigListParams {
    /**
     * Cursor for pagination. The cursor is a base64 encoded string of the page and
     * limit. The page is the page number and the limit is the number of items per
     * page. The cursor is used to paginate through the items. The cursor is not
     * required for the first page.
     */
    cursor?: string;
    /**
     * The app id to filter by
     */
    deprecated_app_id?: string;
    deprecated_status?: string;
    /**
     * Whether to filter by composio managed auth configs
     */
    is_composio_managed?: string | boolean;
    /**
     * Number of items per page
     */
    limit?: number | null;
    /**
     * Search auth configs by name
     */
    search?: string;
    /**
     * Show disabled auth configs
     */
    show_disabled?: boolean | null;
    /**
     * Comma-separated list of toolkit slugs to filter auth configs by
     */
    toolkit_slug?: string;
}
export interface AuthConfigUpdateStatusParams {
    /**
     * The unique identifier of the authentication configuration to update
     */
    nanoid: string;
}
export declare namespace AuthConfigs {
    export { type AuthConfigCreateResponse as AuthConfigCreateResponse, type AuthConfigRetrieveResponse as AuthConfigRetrieveResponse, type AuthConfigUpdateResponse as AuthConfigUpdateResponse, type AuthConfigListResponse as AuthConfigListResponse, type AuthConfigDeleteResponse as AuthConfigDeleteResponse, type AuthConfigUpdateStatusResponse as AuthConfigUpdateStatusResponse, type AuthConfigCreateParams as AuthConfigCreateParams, type AuthConfigUpdateParams as AuthConfigUpdateParams, type AuthConfigListParams as AuthConfigListParams, type AuthConfigUpdateStatusParams as AuthConfigUpdateStatusParams, };
}
//# sourceMappingURL=auth-configs.d.mts.map