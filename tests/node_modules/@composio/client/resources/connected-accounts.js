"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectedAccounts = void 0;
const resource_1 = require("../core/resource.js");
const path_1 = require("../internal/utils/path.js");
class ConnectedAccounts extends resource_1.APIResource {
    /**
     * Create a new connected account
     *
     * @example
     * ```ts
     * const connectedAccount =
     *   await client.connectedAccounts.create({
     *     auth_config: { id: 'id' },
     *     connection: {},
     *   });
     * ```
     */
    create(body, options) {
        return this._client.post('/api/v3/connected_accounts', { body, ...options });
    }
    /**
     * Retrieves comprehensive details of a connected account, including authentication
     * configuration, connection status, and all parameters needed for API requests.
     *
     * @example
     * ```ts
     * const connectedAccount =
     *   await client.connectedAccounts.retrieve(
     *     'con_1a2b3c4d5e6f',
     *   );
     * ```
     */
    retrieve(nanoid, options) {
        return this._client.get((0, path_1.path) `/api/v3/connected_accounts/${nanoid}`, options);
    }
    /**
     * List connected accounts with optional filters
     *
     * @example
     * ```ts
     * const connectedAccounts =
     *   await client.connectedAccounts.list();
     * ```
     */
    list(query = {}, options) {
        return this._client.get('/api/v3/connected_accounts', { query, ...options });
    }
    /**
     * Soft-deletes a connected account by marking it as deleted in the database. This
     * prevents the account from being used for API calls but preserves the record for
     * audit purposes.
     *
     * @example
     * ```ts
     * const connectedAccount =
     *   await client.connectedAccounts.delete('con_1a2b3c4d5e6f');
     * ```
     */
    delete(nanoid, options) {
        return this._client.delete((0, path_1.path) `/api/v3/connected_accounts/${nanoid}`, options);
    }
    /**
     * Initiates a new authentication flow for a connected account when credentials
     * have expired or become invalid. This may generate a new authentication URL for
     * OAuth flows or refresh tokens for other auth schemes.
     *
     * @example
     * ```ts
     * const response = await client.connectedAccounts.refresh(
     *   'con_1a2b3c4d5e6f',
     * );
     * ```
     */
    refresh(nanoid, params = {}, options) {
        const { query_redirect_url, ...body } = params ?? {};
        return this._client.post((0, path_1.path) `/api/v3/connected_accounts/${nanoid}/refresh`, {
            query: { redirect_url: query_redirect_url },
            body,
            ...options,
        });
    }
    /**
     * Updates the status of a connected account to either enabled (active) or disabled
     * (inactive). Disabled accounts cannot be used for API calls but remain in the
     * database.
     *
     * @example
     * ```ts
     * const response =
     *   await client.connectedAccounts.updateStatus(
     *     'con_1a2b3c4d5e6f',
     *     { enabled: true },
     *   );
     * ```
     */
    updateStatus(nanoID, body, options) {
        return this._client.patch((0, path_1.path) `/api/v3/connected_accounts/${nanoID}/status`, { body, ...options });
    }
}
exports.ConnectedAccounts = ConnectedAccounts;
//# sourceMappingURL=connected-accounts.js.map