import { APIResource } from "../../../core/resource.js";
import * as APIKeysAPI from "./api-keys.js";
import { APIKeyCreateAPIKeyResponse, APIKeyCreateParams, APIKeyCreateResponse, APIKeyDeleteParams, APIKeyDeleteResponse, APIKeyListResponse, APIKeys } from "./api-keys.js";
import * as TriggerAPI from "./trigger.js";
import { Trigger, TriggerListResponse, TriggerUpdateParams, TriggerUpdateResponse } from "./trigger.js";
import * as WebhookAPI from "./webhook.js";
import { Webhook, WebhookDeleteParams, WebhookDeleteResponse, WebhookRefreshResponse, WebhookRetrieveParams, WebhookRetrieveResponse, WebhookUpdateParams, WebhookUpdateResponse } from "./webhook.js";
import { APIPromise } from "../../../core/api-promise.js";
import { RequestOptions } from "../../../internal/request-options.js";
export declare class Project extends APIResource {
    apiKeys: APIKeysAPI.APIKeys;
    webhook: WebhookAPI.Webhook;
    trigger: TriggerAPI.Trigger;
    /**
     * Creates a new project within the authenticated user's organization using the
     * specified name. Projects are isolated environments within your organization,
     * each with their own API keys, webhook configurations, and resources. Use this
     * endpoint to create additional projects for different environments (e.g.,
     * development, staging, production) or for separate applications.
     *
     * @example
     * ```ts
     * const project = await client.org.project.create({
     *   name: 'my-production-api',
     * });
     * ```
     */
    create(body: ProjectCreateParams, options?: RequestOptions): APIPromise<ProjectCreateResponse>;
    /**
     * Retrieves detailed information about a specific project using its unique
     * identifier. This endpoint provides complete project configuration including
     * webhook URLs, creation and update timestamps, and webhook secrets. Use this
     * endpoint to inspect project settings or verify project configuration.
     *
     * @example
     * ```ts
     * const project = await client.org.project.retrieve(
     *   'proj_abc123xyz456',
     * );
     * ```
     */
    retrieve(projectID: string, options?: RequestOptions): APIPromise<ProjectRetrieveResponse>;
    /**
     * Retrieves all projects belonging to the authenticated user's organization.
     * Projects are returned in descending order of creation date (newest first). This
     * endpoint is useful for displaying project selection in dashboards or for
     * integrations that need to list all available projects.
     *
     * @example
     * ```ts
     * const projects = await client.org.project.list();
     * ```
     */
    list(query?: ProjectListParams | null | undefined, options?: RequestOptions): APIPromise<ProjectListResponse>;
    /**
     * Soft-deletes a project within the organization by its unique identifier. When a
     * project is deleted, it is marked as deleted but not immediately removed from the
     * database. This operation affects all resources associated with the project
     * including API keys, webhook configurations, and connected services. This action
     * cannot be undone through the API.
     *
     * @example
     * ```ts
     * const project = await client.org.project.delete(
     *   'proj_abc123xyz456',
     * );
     * ```
     */
    delete(projectID: string, options?: RequestOptions): APIPromise<ProjectDeleteResponse>;
}
export interface ProjectCreateResponse {
    /**
     * Unique identifier for the project
     */
    id: string;
    /**
     * ISO timestamp when the project was created
     */
    created_at: string;
    /**
     * Whether this project has been soft-deleted
     */
    deleted: boolean;
    /**
     * Email address associated with the project
     */
    email: string;
    /**
     * URL where event webhook notifications will be sent (can be null)
     */
    event_webhook_url: string | null;
    /**
     * Name of the project
     */
    name: string;
    /**
     * Identifier of the organization that owns this project
     */
    org_id: string;
    /**
     * ISO timestamp when the project was last updated
     */
    updated_at: string;
    /**
     * Secret key used to sign webhook payloads for verification
     */
    webhook_secret: string | null;
    /**
     * URL where webhook events will be sent (can be null)
     */
    webhook_url: string | null;
    /**
     * Indicates if the webhook configuration is using the new format
     */
    is_new_webhook?: boolean;
    /**
     * ISO timestamp when the project last subscribed to updates
     */
    last_subscribed_at?: string | null;
    /**
     * Whether triggers are enabled for this project
     */
    triggers_enabled?: boolean;
}
export interface ProjectRetrieveResponse {
    /**
     * Unique identifier for the project
     */
    id: string;
    /**
     * ISO timestamp when the project was created
     */
    created_at: string;
    /**
     * Whether this project has been soft-deleted
     */
    deleted: boolean;
    /**
     * Email address associated with the project
     */
    email: string;
    /**
     * URL where event webhook notifications will be sent (can be null)
     */
    event_webhook_url: string | null;
    /**
     * Name of the project
     */
    name: string;
    /**
     * Identifier of the organization that owns this project
     */
    org_id: string;
    /**
     * ISO timestamp when the project was last updated
     */
    updated_at: string;
    /**
     * Secret key used to sign webhook payloads for verification
     */
    webhook_secret: string | null;
    /**
     * URL where webhook events will be sent (can be null)
     */
    webhook_url: string | null;
    /**
     * Indicates if the webhook configuration is using the new format
     */
    is_new_webhook?: boolean;
    /**
     * ISO timestamp when the project last subscribed to updates
     */
    last_subscribed_at?: string | null;
    /**
     * Whether triggers are enabled for this project
     */
    triggers_enabled?: boolean;
}
/**
 * Response containing a list of projects
 */
export interface ProjectListResponse {
    /**
     * Array of projects belonging to the organization
     */
    data: Array<ProjectListResponse.Data>;
}
export declare namespace ProjectListResponse {
    interface Data {
        /**
         * Unique identifier for the project
         */
        id: string;
        /**
         * ISO timestamp when the project was created
         */
        created_at: string;
        /**
         * Whether this project has been soft-deleted
         */
        deleted: boolean;
        /**
         * Email address associated with the project
         */
        email: string;
        /**
         * URL where event webhook notifications will be sent (can be null)
         */
        event_webhook_url: string | null;
        /**
         * Name of the project
         */
        name: string;
        /**
         * Identifier of the organization that owns this project
         */
        org_id: string;
        /**
         * ISO timestamp when the project was last updated
         */
        updated_at: string;
        /**
         * Secret key used to sign webhook payloads for verification
         */
        webhook_secret: string | null;
        /**
         * URL where webhook events will be sent (can be null)
         */
        webhook_url: string | null;
        /**
         * Indicates if the webhook configuration is using the new format
         */
        is_new_webhook?: boolean;
        /**
         * ISO timestamp when the project last subscribed to updates
         */
        last_subscribed_at?: string | null;
        /**
         * Whether triggers are enabled for this project
         */
        triggers_enabled?: boolean;
    }
}
/**
 * Response indicating the result of a project deletion operation
 */
export interface ProjectDeleteResponse {
    /**
     * Status of the delete operation
     */
    status: string;
}
export interface ProjectCreateParams {
    /**
     * A unique name for your project that follows the required format rules
     */
    name: string;
}
export interface ProjectListParams {
    list_all_org_projects?: boolean | null;
}
export declare namespace Project {
    export { type ProjectCreateResponse as ProjectCreateResponse, type ProjectRetrieveResponse as ProjectRetrieveResponse, type ProjectListResponse as ProjectListResponse, type ProjectDeleteResponse as ProjectDeleteResponse, type ProjectCreateParams as ProjectCreateParams, type ProjectListParams as ProjectListParams, };
    export { APIKeys as APIKeys, type APIKeyCreateResponse as APIKeyCreateResponse, type APIKeyListResponse as APIKeyListResponse, type APIKeyDeleteResponse as APIKeyDeleteResponse, type APIKeyCreateAPIKeyResponse as APIKeyCreateAPIKeyResponse, type APIKeyCreateParams as APIKeyCreateParams, type APIKeyDeleteParams as APIKeyDeleteParams, };
    export { Webhook as Webhook, type WebhookRetrieveResponse as WebhookRetrieveResponse, type WebhookUpdateResponse as WebhookUpdateResponse, type WebhookDeleteResponse as WebhookDeleteResponse, type WebhookRefreshResponse as WebhookRefreshResponse, type WebhookRetrieveParams as WebhookRetrieveParams, type WebhookUpdateParams as WebhookUpdateParams, type WebhookDeleteParams as WebhookDeleteParams, };
    export { Trigger as Trigger, type TriggerUpdateResponse as TriggerUpdateResponse, type TriggerListResponse as TriggerListResponse, type TriggerUpdateParams as TriggerUpdateParams, };
}
//# sourceMappingURL=project.d.ts.map