import { APIResource } from "../../../core/resource.js";
import { APIPromise } from "../../../core/api-promise.js";
import { RequestOptions } from "../../../internal/request-options.js";
export declare class Trigger extends APIResource {
    /**
     * Updates the trigger enablement status for the current project. Use this endpoint
     * to enable or disable triggers for automated workflows within a project.
     *
     * @example
     * ```ts
     * const trigger = await client.org.project.trigger.update();
     * ```
     */
    update(params?: TriggerUpdateParams | null | undefined, options?: RequestOptions): APIPromise<TriggerUpdateResponse>;
    /**
     * Retrieves the current project details including its trigger enablement status.
     * Use this endpoint to check whether triggers are currently enabled or disabled
     * for a project.
     *
     * @example
     * ```ts
     * const triggers = await client.org.project.trigger.list();
     * ```
     */
    list(options?: RequestOptions): APIPromise<TriggerListResponse>;
}
export interface TriggerUpdateResponse {
    /**
     * Unique identifier for the project
     */
    id: string;
    /**
     * ISO timestamp when the project was created
     */
    created_at: string;
    /**
     * Whether this project has been soft-deleted
     */
    deleted: boolean;
    /**
     * Email address associated with the project
     */
    email: string;
    /**
     * URL where event webhook notifications will be sent (can be null)
     */
    event_webhook_url: string | null;
    /**
     * Name of the project
     */
    name: string;
    /**
     * Identifier of the organization that owns this project
     */
    org_id: string;
    /**
     * ISO timestamp when the project was last updated
     */
    updated_at: string;
    /**
     * Secret key used to sign webhook payloads for verification
     */
    webhook_secret: string | null;
    /**
     * URL where webhook events will be sent (can be null)
     */
    webhook_url: string | null;
    /**
     * Indicates if the webhook configuration is using the new format
     */
    is_new_webhook?: boolean;
    /**
     * ISO timestamp when the project last subscribed to updates
     */
    last_subscribed_at?: string | null;
    /**
     * Whether triggers are enabled for this project
     */
    triggers_enabled?: boolean;
}
export interface TriggerListResponse {
    /**
     * Unique identifier for the project
     */
    id: string;
    /**
     * ISO timestamp when the project was created
     */
    created_at: string;
    /**
     * Whether this project has been soft-deleted
     */
    deleted: boolean;
    /**
     * Email address associated with the project
     */
    email: string;
    /**
     * URL where event webhook notifications will be sent (can be null)
     */
    event_webhook_url: string | null;
    /**
     * Name of the project
     */
    name: string;
    /**
     * Identifier of the organization that owns this project
     */
    org_id: string;
    /**
     * ISO timestamp when the project was last updated
     */
    updated_at: string;
    /**
     * Secret key used to sign webhook payloads for verification
     */
    webhook_secret: string | null;
    /**
     * URL where webhook events will be sent (can be null)
     */
    webhook_url: string | null;
    /**
     * Indicates if the webhook configuration is using the new format
     */
    is_new_webhook?: boolean;
    /**
     * ISO timestamp when the project last subscribed to updates
     */
    last_subscribed_at?: string | null;
    /**
     * Whether triggers are enabled for this project
     */
    triggers_enabled?: boolean;
}
export interface TriggerUpdateParams {
    /**
     * Boolean flag indicating whether triggers should be enabled (true) or disabled
     * (false) for the project
     */
    enabled?: boolean | null;
}
export declare namespace Trigger {
    export { type TriggerUpdateResponse as TriggerUpdateResponse, type TriggerListResponse as TriggerListResponse, type TriggerUpdateParams as TriggerUpdateParams, };
}
//# sourceMappingURL=trigger.d.ts.map