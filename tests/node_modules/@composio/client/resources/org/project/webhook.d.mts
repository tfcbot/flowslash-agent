import { APIResource } from "../../../core/resource.mjs";
import { APIPromise } from "../../../core/api-promise.mjs";
import { RequestOptions } from "../../../internal/request-options.mjs";
export declare class Webhook extends APIResource {
    /**
     * Retrieves the webhook URL and secret for the current project. Webhooks come in
     * two types: "trigger" webhooks are used for integration trigger events, while
     * "event" webhooks receive system notifications about project events. The response
     * includes both the URL and the secret key used to verify webhook signatures.
     *
     * @example
     * ```ts
     * const webhook = await client.org.project.webhook.retrieve({
     *   type: 'trigger',
     * });
     * ```
     */
    retrieve(query: WebhookRetrieveParams, options?: RequestOptions): APIPromise<WebhookRetrieveResponse>;
    /**
     * Updates the webhook URL for the current project based on the specified type
     * (trigger or event). Webhook URLs are endpoints that receive notifications about
     * events in your project. "Trigger" webhooks receive integration trigger events,
     * while "event" webhooks receive system notifications. This endpoint allows you to
     * set or change these notification destinations.
     *
     * @example
     * ```ts
     * const webhook = await client.org.project.webhook.update({
     *   type: 'trigger',
     *   webhook_url: 'https://example.com/api/webhooks/triggers',
     * });
     * ```
     */
    update(body: WebhookUpdateParams, options?: RequestOptions): APIPromise<WebhookUpdateResponse>;
    /**
     * Removes a webhook URL (trigger or event) from the project configuration. This
     * operation sets the specified webhook URL to null in the database but preserves
     * the webhook secret. After deletion, the project will no longer receive webhook
     * notifications of the specified type until a new URL is configured.
     *
     * @example
     * ```ts
     * const webhook = await client.org.project.webhook.delete({
     *   type: 'trigger',
     * });
     * ```
     */
    delete(body: WebhookDeleteParams, options?: RequestOptions): APIPromise<WebhookDeleteResponse>;
    /**
     * Generates a new webhook secret for the project, invalidating the previous one.
     * Webhook secrets are used to verify the authenticity of incoming webhook payloads
     * through signature verification. This endpoint should be used when you need to
     * rotate your webhook secret for security purposes. After refreshing, you must
     * update your webhook verification logic to use the new secret.
     *
     * @example
     * ```ts
     * const response = await client.org.project.webhook.refresh();
     * ```
     */
    refresh(options?: RequestOptions): APIPromise<WebhookRefreshResponse>;
}
/**
 * Response containing webhook URL configuration and secret
 */
export interface WebhookRetrieveResponse {
    /**
     * Indicates whether the webhook was found and retrieved successfully
     */
    status: 'success' | 'not found';
    /**
     * The webhook configuration containing either trigger or event webhook URL
     */
    url: WebhookRetrieveResponse.UnionMember0 | WebhookRetrieveResponse.UnionMember1;
    /**
     * The secret key that should be used to verify webhook signatures
     */
    webhook_secret: string;
}
export declare namespace WebhookRetrieveResponse {
    interface UnionMember0 {
        /**
         * Identifies this as a trigger webhook response
         */
        type: 'trigger';
        /**
         * The URL endpoint where trigger notifications will be delivered
         */
        webhook_url?: string;
    }
    interface UnionMember1 {
        /**
         * Identifies this as an event webhook response
         */
        type: 'event';
        /**
         * The URL endpoint where event notifications will be delivered
         */
        event_webhook_url?: string;
    }
}
/**
 * Response indicating the status of the webhook URL update operation
 */
export interface WebhookUpdateResponse {
    /**
     * Human-readable description of the update operation result
     */
    message: string;
    /**
     * Indicates if the webhook URL update was completed successfully
     */
    success: boolean;
}
/**
 * Response indicating successful webhook URL deletion
 */
export interface WebhookDeleteResponse {
    /**
     * Indicates the webhook URL was successfully removed
     */
    status: 'success';
}
/**
 * Response containing the newly generated webhook secret
 */
export interface WebhookRefreshResponse {
    /**
     * Human-readable description of the refresh operation result
     */
    message: string;
    /**
     * Indicates if the webhook secret was successfully refreshed
     */
    success: boolean;
    /**
     * The new secret key that should be used to verify incoming webhook payloads
     */
    webhook_secret: string;
}
export interface WebhookRetrieveParams {
    /**
     * Type of webhook to retrieve (trigger or event)
     */
    type: 'trigger' | 'event';
}
export interface WebhookUpdateParams {
    /**
     * Specifies which webhook type to update (trigger or event)
     */
    type: 'trigger' | 'event';
    /**
     * Valid URL that will receive webhook payloads. Must include https:// protocol.
     */
    webhook_url: string;
}
export interface WebhookDeleteParams {
    /**
     * Specifies which webhook type to remove from the project configuration
     */
    type: 'trigger' | 'event';
}
export declare namespace Webhook {
    export { type WebhookRetrieveResponse as WebhookRetrieveResponse, type WebhookUpdateResponse as WebhookUpdateResponse, type WebhookDeleteResponse as WebhookDeleteResponse, type WebhookRefreshResponse as WebhookRefreshResponse, type WebhookRetrieveParams as WebhookRetrieveParams, type WebhookUpdateParams as WebhookUpdateParams, type WebhookDeleteParams as WebhookDeleteParams, };
}
//# sourceMappingURL=webhook.d.mts.map