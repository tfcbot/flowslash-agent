"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.APIKeys = void 0;
const resource_1 = require("../../../core/resource.js");
const path_1 = require("../../../internal/utils/path.js");
class APIKeys extends resource_1.APIResource {
    /**
     * Creates a new API key for the specified project. API keys are used for
     * authenticating requests to the API. This endpoint generates a new key with the
     * provided name and returns the complete key details including the actual key
     * value. Note that the full API key value is only returned once at creation time
     * and cannot be retrieved later, so it should be securely stored immediately.
     *
     * @example
     * ```ts
     * const apiKey = await client.org.project.apiKeys.create(
     *   'proj_abc123xyz456',
     *   { name: 'Production API Key' },
     * );
     * ```
     */
    create(projectID, body, options) {
        return this._client.post((0, path_1.path) `/api/v3/org/project/${projectID}/api_keys/create`, { body, ...options });
    }
    /**
     * Retrieves all API keys associated with the specified project. This endpoint
     * returns details about each API key including its name, creation date, and last
     * used information. Use this endpoint to audit which keys exist for a project or
     * to manage key rotation policies.
     *
     * @example
     * ```ts
     * const apiKeys = await client.org.project.apiKeys.list(
     *   'proj_abc123xyz456',
     * );
     * ```
     */
    list(projectID, options) {
        return this._client.get((0, path_1.path) `/api/v3/org/project/${projectID}/api_keys/list`, options);
    }
    /**
     * Permanently deletes an API key from the specified project. Once deleted, the API
     * key can no longer be used for authentication and any services using it will need
     * to be updated with a new key. This operation cannot be undone, so it should be
     * used with caution.
     *
     * @example
     * ```ts
     * const apiKey = await client.org.project.apiKeys.delete(
     *   '01H4DKRF5SMP7NQCA3BWT0JYB6',
     *   { projectId: 'proj_abc123xyz456' },
     * );
     * ```
     */
    delete(id, params, options) {
        const { projectId } = params;
        return this._client.delete((0, path_1.path) `/api/v3/org/project/${projectId}/api_keys/remove/${id}`, options);
    }
    /**
     * Retrieves an existing API key for the project or creates a new one if none
     * exists. This endpoint is useful for ensuring a project always has at least one
     * API key without the risk of creating duplicates. If an API key already exists,
     * it returns the existing key. If no API keys exist for the project, it creates a
     * new one with an automatically generated name.
     *
     * @example
     * ```ts
     * const response =
     *   await client.org.project.apiKeys.createAPIKey(
     *     'proj_abc123xyz456',
     *   );
     * ```
     */
    createAPIKey(projectID, options) {
        return this._client.post((0, path_1.path) `/api/v3/org/project/${projectID}/api_keys/create-api-key`, options);
    }
}
exports.APIKeys = APIKeys;
//# sourceMappingURL=api-keys.js.map