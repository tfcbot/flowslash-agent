// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../../core/resource.mjs";
export class Webhook extends APIResource {
    /**
     * Retrieves the webhook URL and secret for the current project. Webhooks come in
     * two types: "trigger" webhooks are used for integration trigger events, while
     * "event" webhooks receive system notifications about project events. The response
     * includes both the URL and the secret key used to verify webhook signatures.
     *
     * @example
     * ```ts
     * const webhook = await client.org.project.webhook.retrieve({
     *   type: 'trigger',
     * });
     * ```
     */
    retrieve(query, options) {
        return this._client.get('/api/v3/org/project/webhook', { query, ...options });
    }
    /**
     * Updates the webhook URL for the current project based on the specified type
     * (trigger or event). Webhook URLs are endpoints that receive notifications about
     * events in your project. "Trigger" webhooks receive integration trigger events,
     * while "event" webhooks receive system notifications. This endpoint allows you to
     * set or change these notification destinations.
     *
     * @example
     * ```ts
     * const webhook = await client.org.project.webhook.update({
     *   type: 'trigger',
     *   webhook_url: 'https://example.com/api/webhooks/triggers',
     * });
     * ```
     */
    update(body, options) {
        return this._client.post('/api/v3/org/project/webhook/update', { body, ...options });
    }
    /**
     * Removes a webhook URL (trigger or event) from the project configuration. This
     * operation sets the specified webhook URL to null in the database but preserves
     * the webhook secret. After deletion, the project will no longer receive webhook
     * notifications of the specified type until a new URL is configured.
     *
     * @example
     * ```ts
     * const webhook = await client.org.project.webhook.delete({
     *   type: 'trigger',
     * });
     * ```
     */
    delete(body, options) {
        return this._client.delete('/api/v3/org/project/webhook', { body, ...options });
    }
    /**
     * Generates a new webhook secret for the project, invalidating the previous one.
     * Webhook secrets are used to verify the authenticity of incoming webhook payloads
     * through signature verification. This endpoint should be used when you need to
     * rotate your webhook secret for security purposes. After refreshing, you must
     * update your webhook verification logic to use the new secret.
     *
     * @example
     * ```ts
     * const response = await client.org.project.webhook.refresh();
     * ```
     */
    refresh(options) {
        return this._client.post('/api/v3/org/project/webhook/refresh', options);
    }
}
//# sourceMappingURL=webhook.mjs.map