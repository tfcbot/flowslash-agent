// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../../core/resource.mjs";
import * as APIKeysAPI from "./api-keys.mjs";
import { APIKeys, } from "./api-keys.mjs";
import * as TriggerAPI from "./trigger.mjs";
import { Trigger } from "./trigger.mjs";
import * as WebhookAPI from "./webhook.mjs";
import { Webhook, } from "./webhook.mjs";
import { path } from "../../../internal/utils/path.mjs";
export class Project extends APIResource {
    constructor() {
        super(...arguments);
        this.apiKeys = new APIKeysAPI.APIKeys(this._client);
        this.webhook = new WebhookAPI.Webhook(this._client);
        this.trigger = new TriggerAPI.Trigger(this._client);
    }
    /**
     * Creates a new project within the authenticated user's organization using the
     * specified name. Projects are isolated environments within your organization,
     * each with their own API keys, webhook configurations, and resources. Use this
     * endpoint to create additional projects for different environments (e.g.,
     * development, staging, production) or for separate applications.
     *
     * @example
     * ```ts
     * const project = await client.org.project.create({
     *   name: 'my-production-api',
     * });
     * ```
     */
    create(body, options) {
        return this._client.post('/api/v3/org/project/new', { body, ...options });
    }
    /**
     * Retrieves detailed information about a specific project using its unique
     * identifier. This endpoint provides complete project configuration including
     * webhook URLs, creation and update timestamps, and webhook secrets. Use this
     * endpoint to inspect project settings or verify project configuration.
     *
     * @example
     * ```ts
     * const project = await client.org.project.retrieve(
     *   'proj_abc123xyz456',
     * );
     * ```
     */
    retrieve(projectID, options) {
        return this._client.get(path `/api/v3/org/project/${projectID}`, options);
    }
    /**
     * Retrieves all projects belonging to the authenticated user's organization.
     * Projects are returned in descending order of creation date (newest first). This
     * endpoint is useful for displaying project selection in dashboards or for
     * integrations that need to list all available projects.
     *
     * @example
     * ```ts
     * const projects = await client.org.project.list();
     * ```
     */
    list(query = {}, options) {
        return this._client.get('/api/v3/org/project/list', { query, ...options });
    }
    /**
     * Soft-deletes a project within the organization by its unique identifier. When a
     * project is deleted, it is marked as deleted but not immediately removed from the
     * database. This operation affects all resources associated with the project
     * including API keys, webhook configurations, and connected services. This action
     * cannot be undone through the API.
     *
     * @example
     * ```ts
     * const project = await client.org.project.delete(
     *   'proj_abc123xyz456',
     * );
     * ```
     */
    delete(projectID, options) {
        return this._client.delete(path `/api/v3/org/project/delete/${projectID}`, options);
    }
}
Project.APIKeys = APIKeys;
Project.Webhook = Webhook;
Project.Trigger = Trigger;
//# sourceMappingURL=project.mjs.map