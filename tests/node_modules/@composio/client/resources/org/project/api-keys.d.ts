import { APIResource } from "../../../core/resource.js";
import { APIPromise } from "../../../core/api-promise.js";
import { RequestOptions } from "../../../internal/request-options.js";
export declare class APIKeys extends APIResource {
    /**
     * Creates a new API key for the specified project. API keys are used for
     * authenticating requests to the API. This endpoint generates a new key with the
     * provided name and returns the complete key details including the actual key
     * value. Note that the full API key value is only returned once at creation time
     * and cannot be retrieved later, so it should be securely stored immediately.
     *
     * @example
     * ```ts
     * const apiKey = await client.org.project.apiKeys.create(
     *   'proj_abc123xyz456',
     *   { name: 'Production API Key' },
     * );
     * ```
     */
    create(projectID: string, body: APIKeyCreateParams, options?: RequestOptions): APIPromise<APIKeyCreateResponse>;
    /**
     * Retrieves all API keys associated with the specified project. This endpoint
     * returns details about each API key including its name, creation date, and last
     * used information. Use this endpoint to audit which keys exist for a project or
     * to manage key rotation policies.
     *
     * @example
     * ```ts
     * const apiKeys = await client.org.project.apiKeys.list(
     *   'proj_abc123xyz456',
     * );
     * ```
     */
    list(projectID: string, options?: RequestOptions): APIPromise<APIKeyListResponse>;
    /**
     * Permanently deletes an API key from the specified project. Once deleted, the API
     * key can no longer be used for authentication and any services using it will need
     * to be updated with a new key. This operation cannot be undone, so it should be
     * used with caution.
     *
     * @example
     * ```ts
     * const apiKey = await client.org.project.apiKeys.delete(
     *   '01H4DKRF5SMP7NQCA3BWT0JYB6',
     *   { projectId: 'proj_abc123xyz456' },
     * );
     * ```
     */
    delete(id: string, params: APIKeyDeleteParams, options?: RequestOptions): APIPromise<APIKeyDeleteResponse>;
    /**
     * Retrieves an existing API key for the project or creates a new one if none
     * exists. This endpoint is useful for ensuring a project always has at least one
     * API key without the risk of creating duplicates. If an API key already exists,
     * it returns the existing key. If no API keys exist for the project, it creates a
     * new one with an automatically generated name.
     *
     * @example
     * ```ts
     * const response =
     *   await client.org.project.apiKeys.createAPIKey(
     *     'proj_abc123xyz456',
     *   );
     * ```
     */
    createAPIKey(projectID: string, options?: RequestOptions): APIPromise<APIKeyCreateAPIKeyResponse>;
}
/**
 * API key object containing the key details
 */
export interface APIKeyCreateResponse {
    /**
     * Database record identifier for the API key
     */
    id: string;
    /**
     * UTC timestamp indicating when the API key was created
     */
    created_at: string;
    /**
     * The API key string value that should be included in API requests. This value is
     * only shown once at creation time.
     */
    key: string;
    /**
     * Descriptive name assigned to help identify the key's purpose
     */
    name: string;
    /**
     * UTC timestamp indicating when the API key was last used for authentication. Will
     * be null for newly created keys.
     */
    last_used_at?: string;
}
/**
 * Response containing the list of API keys for a project
 */
export interface APIKeyListResponse {
    /**
     * List of all API keys for the specified project, including their properties and
     * usage information
     */
    items: Array<APIKeyListResponse.Item>;
}
export declare namespace APIKeyListResponse {
    interface Item {
        /**
         * Unique identifier for the API key record
         */
        id: string;
        /**
         * UTC timestamp indicating when the API key was created
         */
        created_at: string;
        /**
         * The API key string that should be included in API requests for authentication
         */
        key: string;
        /**
         * Descriptive name assigned to the API key for identification purposes
         */
        name: string;
        /**
         * UTC timestamp indicating when the API key was last used for authentication. Will
         * be null if the key has never been used.
         */
        last_used?: string;
    }
}
/**
 * Response indicating the status of the API key deletion operation
 */
export interface APIKeyDeleteResponse {
    /**
     * Status message providing details about the deletion operation
     */
    message: string;
    /**
     * Boolean flag indicating if the deletion operation was successful
     */
    success: boolean;
}
/**
 * API key object containing the key details
 */
export interface APIKeyCreateAPIKeyResponse {
    /**
     * Database record identifier for the API key
     */
    id: string;
    /**
     * UTC timestamp indicating when the API key was created
     */
    created_at: string;
    /**
     * The API key string value that should be included in API requests. This value is
     * only shown once.
     */
    key: string;
    /**
     * Name assigned to help identify the key's purpose. For auto-generated keys, this
     * will be a random name.
     */
    name: string;
    /**
     * UTC timestamp indicating when the API key was last used for authentication. Will
     * be null for newly created keys.
     */
    last_used_at?: string;
}
export interface APIKeyCreateParams {
    /**
     * A user-friendly name to identify the API key's purpose (e.g., "Production
     * Server", "Test Environment")
     */
    name: string;
}
export interface APIKeyDeleteParams {
    /**
     * The project Nano ID that owns the API key to be deleted
     */
    projectId: string;
}
export declare namespace APIKeys {
    export { type APIKeyCreateResponse as APIKeyCreateResponse, type APIKeyListResponse as APIKeyListResponse, type APIKeyDeleteResponse as APIKeyDeleteResponse, type APIKeyCreateAPIKeyResponse as APIKeyCreateAPIKeyResponse, type APIKeyCreateParams as APIKeyCreateParams, type APIKeyDeleteParams as APIKeyDeleteParams, };
}
//# sourceMappingURL=api-keys.d.ts.map