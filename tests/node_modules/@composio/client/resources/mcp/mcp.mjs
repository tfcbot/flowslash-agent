// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../core/resource.mjs";
import * as CustomAPI from "./custom.mjs";
import { Custom } from "./custom.mjs";
import * as GenerateAPI from "./generate.mjs";
import { Generate } from "./generate.mjs";
import { buildHeaders } from "../../internal/headers.mjs";
import { path } from "../../internal/utils/path.mjs";
export class Mcp extends APIResource {
    constructor() {
        super(...arguments);
        this.custom = new CustomAPI.Custom(this._client);
        this.generate = new GenerateAPI.Generate(this._client);
    }
    /**
     * Creates a new Model Control Protocol (MCP) server instance for the authenticated
     * project. An MCP server provides a connection point for AI assistants to access
     * your applications and services. The server is configured with specific
     * authentication and tool permissions that determine what actions the connected
     * assistants can perform.
     *
     * @example
     * ```ts
     * const mcp = await client.mcp.create({
     *   auth_config_ids: ['auth_cfg_abc123def456'],
     *   name: 'GitHub Integration Server',
     * });
     * ```
     */
    create(body, options) {
        return this._client.post('/api/v3/mcp/servers', { body, ...options });
    }
    /**
     * Retrieves detailed configuration information for a specific Model Control
     * Protocol (MCP) server. The returned data includes connection details, associated
     * applications, enabled tools, and authentication configuration.
     *
     * @example
     * ```ts
     * const mcp = await client.mcp.retrieve(
     *   '550e8400-e29b-41d4-a716-446655440000',
     * );
     * ```
     */
    retrieve(id, options) {
        return this._client.get(path `/api/v3/mcp/${id}`, options);
    }
    /**
     * Updates the configuration of an existing Model Control Protocol (MCP) server.
     * You can modify the server name, associated applications, and enabled tools. Only
     * the fields included in the request will be updated.
     *
     * @example
     * ```ts
     * const mcp = await client.mcp.update(
     *   '550e8400-e29b-41d4-a716-446655440000',
     *   { name: 'Updated GitHub Integration Server' },
     * );
     * ```
     */
    update(id, body = {}, options) {
        return this._client.patch(path `/api/v3/mcp/${id}`, { body, ...options });
    }
    /**
     * Retrieves a paginated list of MCP servers associated with the authenticated
     * project. Results can be filtered by name, toolkit, or authentication
     * configuration ID. MCP servers are used to provide Model Control Protocol
     * integration points for connecting AI assistants to your applications and
     * services.
     *
     * @example
     * ```ts
     * const mcps = await client.mcp.list();
     * ```
     */
    list(query = {}, options) {
        return this._client.get('/api/v3/mcp/servers', { query, ...options });
    }
    /**
     * Performs a soft delete on a Model Control Protocol (MCP) server, making it
     * unavailable for future use. This operation is reversible in the database but
     * cannot be undone through the API. Any applications or services connected to this
     * server will lose access after deletion.
     *
     * @example
     * ```ts
     * const mcp = await client.mcp.delete(
     *   '550e8400-e29b-41d4-a716-446655440000',
     * );
     * ```
     */
    delete(id, options) {
        return this._client.delete(path `/api/v3/mcp/${id}`, options);
    }
    /**
     * Retrieves a paginated list of Model Control Protocol (MCP) servers that are
     * configured for a specific application or toolkit. This endpoint allows you to
     * find all MCP server instances that have access to a particular application, such
     * as GitHub, Slack, or Jira.
     *
     * @example
     * ```ts
     * const response = await client.mcp.retrieveApp('github');
     * ```
     */
    retrieveApp(appKey, query = {}, options) {
        return this._client.get(path `/api/v3/mcp/app/${appKey}`, { query, ...options });
    }
    /**
     * Admin-only endpoint that validates a Model Control Protocol (MCP) server and
     * retrieves its complete configuration details, including authentication
     * information. This endpoint is typically used by the MCP service itself to
     * authenticate and authorize connection requests from clients.
     *
     * @example
     * ```ts
     * const response = await client.mcp.validate(
     *   '550e8400-e29b-41d4-a716-446655440000',
     *   { 'x-composio-admin-token': 'admin_tk_12345abcdef' },
     * );
     * ```
     */
    validate(uuid, params, options) {
        const { 'x-composio-admin-token': xComposioAdminToken } = params;
        return this._client.get(path `/api/v3/mcp/validate/${uuid}`, {
            ...options,
            headers: buildHeaders([{ 'x-composio-admin-token': xComposioAdminToken }, options?.headers]),
        });
    }
}
Mcp.Custom = Custom;
Mcp.Generate = Generate;
//# sourceMappingURL=mcp.mjs.map