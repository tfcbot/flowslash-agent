// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../core/resource.mjs";
import { path } from "../internal/utils/path.mjs";
export class AuthConfigs extends APIResource {
    /**
     * Create new authentication configuration
     *
     * @example
     * ```ts
     * const authConfig = await client.authConfigs.create({
     *   toolkit: { slug: 'slug' },
     * });
     * ```
     */
    create(body, options) {
        return this._client.post('/api/v3/auth_configs', { body, ...options });
    }
    /**
     * Retrieves detailed information about a specific authentication configuration
     * using its unique identifier.
     *
     * @example
     * ```ts
     * const authConfig = await client.authConfigs.retrieve(
     *   'nanoid',
     * );
     * ```
     */
    retrieve(nanoid, options) {
        return this._client.get(path `/api/v3/auth_configs/${nanoid}`, options);
    }
    /**
     * Modifies an existing authentication configuration with new credentials or other
     * settings. Only specified fields will be updated.
     *
     * @example
     * ```ts
     * const authConfig = await client.authConfigs.update(
     *   'nanoid',
     *   { credentials: { foo: 'bar' }, type: 'custom' },
     * );
     * ```
     */
    update(nanoid, body, options) {
        return this._client.patch(path `/api/v3/auth_configs/${nanoid}`, { body, ...options });
    }
    /**
     * List authentication configurations with optional filters
     *
     * @example
     * ```ts
     * const authConfigs = await client.authConfigs.list();
     * ```
     */
    list(query = {}, options) {
        return this._client.get('/api/v3/auth_configs', { query, ...options });
    }
    /**
     * Soft-deletes an authentication configuration by marking it as deleted in the
     * database. This operation cannot be undone.
     *
     * @example
     * ```ts
     * const authConfig = await client.authConfigs.delete(
     *   'nanoid',
     * );
     * ```
     */
    delete(nanoid, options) {
        return this._client.delete(path `/api/v3/auth_configs/${nanoid}`, options);
    }
    /**
     * Updates the status of an authentication configuration to either enabled or
     * disabled. Disabled configurations cannot be used for new connections.
     *
     * @example
     * ```ts
     * const response = await client.authConfigs.updateStatus(
     *   'ENABLED',
     *   { nanoid: 'nanoid' },
     * );
     * ```
     */
    updateStatus(status, params, options) {
        const { nanoid } = params;
        return this._client.patch(path `/api/v3/auth_configs/${nanoid}/${status}`, options);
    }
}
//# sourceMappingURL=auth-configs.mjs.map