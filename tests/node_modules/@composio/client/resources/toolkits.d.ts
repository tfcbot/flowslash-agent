import { APIResource } from "../core/resource.js";
import { APIPromise } from "../core/api-promise.js";
import { RequestOptions } from "../internal/request-options.js";
export declare class Toolkits extends APIResource {
    /**
     * Retrieves comprehensive information about a specific toolkit using its unique
     * slug identifier. This endpoint provides detailed metadata, authentication
     * configuration options, and feature counts for the requested toolkit.
     */
    retrieve(slug: string, options?: RequestOptions): APIPromise<ToolkitRetrieveResponse>;
    /**
     * Retrieves a comprehensive list of toolkits that are available to the
     * authenticated project. Toolkits represent integration points with external
     * services and applications, each containing a collection of tools and triggers.
     * This endpoint supports filtering by category, management type, and local
     * availability, as well as different sorting options.
     */
    list(query?: ToolkitListParams | null | undefined, options?: RequestOptions): APIPromise<ToolkitListResponse>;
    /**
     * Retrieves a comprehensive list of all available toolkit categories. These
     * categories can be used to filter toolkits by type or purpose when using the
     * toolkit listing endpoint. Categories help organize toolkits into logical groups
     * based on their functionality or industry focus.
     */
    retrieveCategories(query?: ToolkitRetrieveCategoriesParams | null | undefined, options?: RequestOptions): APIPromise<ToolkitRetrieveCategoriesResponse>;
}
/**
 * Detailed information about a single toolkit
 */
export interface ToolkitRetrieveResponse {
    deprecated: ToolkitRetrieveResponse.Deprecated;
    /**
     * Indicates if this toolkit is currently enabled and available for use
     */
    enabled: boolean;
    /**
     * Indicates if this toolkit is specific to the current project or globally
     * available
     */
    is_local_toolkit: boolean;
    /**
     * Comprehensive metadata for the toolkit including dates, descriptions, and
     * statistics
     */
    meta: ToolkitRetrieveResponse.Meta;
    /**
     * Human-readable name of the toolkit
     */
    name: string;
    /**
     * URL-friendly unique identifier for the toolkit
     */
    slug: string;
    /**
     * Complete authentication configuration details for each supported auth method
     */
    auth_config_details?: Array<ToolkitRetrieveResponse.AuthConfigDetail>;
    /**
     * If evaluation of base URL needs some connection info (like shopify), please
     * create the connection and get the base URL from there
     */
    base_url?: string;
    /**
     * List of authentication methods that Composio manages for this toolkit
     */
    composio_managed_auth_schemes?: Array<string>;
    /**
     * Endpoint to get the current user
     */
    get_current_user_endpoint?: string;
}
export declare namespace ToolkitRetrieveResponse {
    interface Deprecated {
        rawProxyInfoByAuthSchemes: Array<{
            [key: string]: unknown;
        }>;
        toolkitId: string;
        getCurrentUserEndpoint?: string;
    }
    /**
     * Comprehensive metadata for the toolkit including dates, descriptions, and
     * statistics
     */
    interface Meta {
        /**
         * List of categories associated with this toolkit
         */
        categories: Array<Meta.Category>;
        /**
         * Creation date and time of the toolkit
         */
        created_at: string;
        /**
         * Human-readable description explaining the toolkit's purpose and functionality
         */
        description: string;
        /**
         * Image URL for the toolkit's branding
         */
        logo: string;
        /**
         * Count of available tools in this toolkit
         */
        tools_count: number;
        /**
         * Count of available triggers in this toolkit
         */
        triggers_count: number;
        /**
         * Last modification date and time of the toolkit
         */
        updated_at: string;
        /**
         * Link to the toolkit's main application or service website
         */
        app_url?: string | null;
    }
    namespace Meta {
        interface Category {
            /**
             * Human-readable category name
             */
            name: string;
            /**
             * URL-friendly identifier for the category
             */
            slug: string;
        }
    }
    /**
     * Detailed configuration for an authentication method
     */
    interface AuthConfigDetail {
        /**
         * Field groups required for different authentication stages
         */
        fields: AuthConfigDetail.Fields;
        /**
         * The type of authentication mode (e.g., oauth2, basic_auth, api_key)
         */
        mode: string;
        /**
         * Display name for this authentication method
         */
        name: string;
        /**
         * Configuration for proxying authentication requests to external services
         */
        proxy?: AuthConfigDetail.Proxy;
    }
    namespace AuthConfigDetail {
        /**
         * Field groups required for different authentication stages
         */
        interface Fields {
            /**
             * Form fields needed when creating an authentication configuration
             */
            auth_config_creation: Fields.AuthConfigCreation;
            /**
             * Form fields needed when connecting a user account with this authentication
             * method
             */
            connected_account_initiation: Fields.ConnectedAccountInitiation;
        }
        namespace Fields {
            /**
             * Form fields needed when creating an authentication configuration
             */
            interface AuthConfigCreation {
                optional: Array<AuthConfigCreation.Optional>;
                required: Array<AuthConfigCreation.Required>;
            }
            namespace AuthConfigCreation {
                interface Optional {
                    description: string;
                    displayName: string;
                    name: string;
                    required: boolean;
                    type: string;
                    default?: string | null;
                    legacy_template_name?: string;
                }
                interface Required {
                    description: string;
                    displayName: string;
                    name: string;
                    required: boolean;
                    type: string;
                    default?: string | null;
                    legacy_template_name?: string;
                }
            }
            /**
             * Form fields needed when connecting a user account with this authentication
             * method
             */
            interface ConnectedAccountInitiation {
                optional: Array<ConnectedAccountInitiation.Optional>;
                required: Array<ConnectedAccountInitiation.Required>;
            }
            namespace ConnectedAccountInitiation {
                interface Optional {
                    description: string;
                    displayName: string;
                    name: string;
                    required: boolean;
                    type: string;
                    default?: string | null;
                    legacy_template_name?: string;
                }
                interface Required {
                    description: string;
                    displayName: string;
                    name: string;
                    required: boolean;
                    type: string;
                    default?: string | null;
                    legacy_template_name?: string;
                }
            }
        }
        /**
         * Configuration for proxying authentication requests to external services
         */
        interface Proxy {
            /**
             * URL to which authentication requests will be proxied
             */
            base_url: string;
        }
    }
}
export interface ToolkitListResponse {
    current_page: number;
    items: Array<ToolkitListResponse.Item>;
    total_items: number;
    total_pages: number;
    next_cursor?: string | null;
}
export declare namespace ToolkitListResponse {
    /**
     * Detailed information about a toolkit
     */
    interface Item {
        /**
         * Deprecated toolkit ID
         */
        deprecated: Item.Deprecated;
        /**
         * Indicates if this toolkit is specific to the current project or globally
         * available
         */
        is_local_toolkit: boolean;
        /**
         * Additional metadata about the toolkit
         */
        meta: Item.Meta;
        /**
         * Human-readable name of the toolkit
         */
        name: string;
        /**
         * URL-friendly unique identifier for the toolkit
         */
        slug: string;
        /**
         * List of authentication methods supported by this toolkit
         */
        auth_schemes?: Array<string>;
        /**
         * List of authentication methods that Composio manages for this toolkit
         */
        composio_managed_auth_schemes?: Array<string>;
        /**
         * When true, this toolkit can be used without authentication
         */
        no_auth?: boolean;
    }
    namespace Item {
        /**
         * Deprecated toolkit ID
         */
        interface Deprecated {
            toolkitId: string;
        }
        /**
         * Additional metadata about the toolkit
         */
        interface Meta {
            /**
             * List of categories associated with this toolkit
             */
            categories: Array<Meta.Category>;
            /**
             * Creation date and time of the toolkit
             */
            created_at: string;
            /**
             * Human-readable description explaining the toolkit's purpose and functionality
             */
            description: string;
            /**
             * Image URL for the toolkit's branding
             */
            logo: string;
            /**
             * Count of available tools in this toolkit
             */
            tools_count: number;
            /**
             * Count of available triggers in this toolkit
             */
            triggers_count: number;
            /**
             * Last modification date and time of the toolkit
             */
            updated_at: string;
            /**
             * Link to the toolkit's main application or service website
             */
            app_url?: string | null;
        }
        namespace Meta {
            interface Category {
                /**
                 * Category identifier
                 */
                id: string;
                /**
                 * Human-readable category name
                 */
                name: string;
            }
        }
    }
}
export interface ToolkitRetrieveCategoriesResponse {
    current_page: number;
    items: Array<ToolkitRetrieveCategoriesResponse.Item>;
    total_items: number;
    total_pages: number;
    next_cursor?: string | null;
}
export declare namespace ToolkitRetrieveCategoriesResponse {
    /**
     * Information about a single toolkit category
     */
    interface Item {
        /**
         * URL-friendly unique identifier for the category, used for filtering toolkits
         */
        id: string;
        /**
         * Display name of the toolkit category
         */
        name: string;
    }
}
export interface ToolkitListParams {
    /**
     * Filter toolkits by category
     */
    category?: string;
    /**
     * Cursor for pagination. The cursor is a base64 encoded string of the page and
     * limit. The page is the page number and the limit is the number of items per
     * page. The cursor is used to paginate through the items. The cursor is not
     * required for the first page.
     */
    cursor?: string;
    /**
     * Whether to include local toolkits in the results
     */
    is_local?: boolean | null;
    /**
     * Number of items per page
     */
    limit?: number | null;
    /**
     * Filter toolkits by who manages them
     */
    managed_by?: 'composio' | 'all' | 'project';
    /**
     * Sort order for returned toolkits
     */
    sort_by?: 'usage' | 'alphabetically';
}
export interface ToolkitRetrieveCategoriesParams {
    /**
     * Cache control parameter
     */
    cache?: string;
}
export declare namespace Toolkits {
    export { type ToolkitRetrieveResponse as ToolkitRetrieveResponse, type ToolkitListResponse as ToolkitListResponse, type ToolkitRetrieveCategoriesResponse as ToolkitRetrieveCategoriesResponse, type ToolkitListParams as ToolkitListParams, type ToolkitRetrieveCategoriesParams as ToolkitRetrieveCategoriesParams, };
}
//# sourceMappingURL=toolkits.d.ts.map