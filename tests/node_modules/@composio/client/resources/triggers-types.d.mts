import { APIResource } from "../core/resource.mjs";
import { APIPromise } from "../core/api-promise.mjs";
import { RequestOptions } from "../internal/request-options.mjs";
export declare class TriggersTypes extends APIResource {
    /**
     * Retrieve detailed information about a specific trigger type using its slug
     * identifier
     *
     * @example
     * ```ts
     * const triggersType = await client.triggersTypes.retrieve(
     *   'SLACK_NEW_MESSAGE',
     * );
     * ```
     */
    retrieve(slug: string, options?: RequestOptions): APIPromise<TriggersTypeRetrieveResponse>;
    /**
     * Retrieve a list of available trigger types with optional filtering by toolkit.
     * Results are paginated and can be filtered by toolkit.
     *
     * @example
     * ```ts
     * const triggersTypes = await client.triggersTypes.list();
     * ```
     */
    list(query?: TriggersTypeListParams | null | undefined, options?: RequestOptions): APIPromise<TriggersTypeListResponse>;
    /**
     * Retrieves a list of all available trigger type enum values that can be used
     * across the API
     *
     * @example
     * ```ts
     * const response = await client.triggersTypes.retrieveEnum();
     * ```
     */
    retrieveEnum(options?: RequestOptions): APIPromise<string>;
}
export interface TriggersTypeRetrieveResponse {
    /**
     * Configuration schema required to set up this trigger
     */
    config: {
        [key: string]: unknown;
    };
    /**
     * Detailed description of what the trigger does
     */
    description: string;
    /**
     * Step-by-step instructions on how to set up and use this trigger
     */
    instructions: string;
    /**
     * Human-readable name of the trigger
     */
    name: string;
    /**
     * Schema of the data payload this trigger will deliver when it fires
     */
    payload: {
        [key: string]: unknown;
    };
    /**
     * Unique identifier for the trigger type
     */
    slug: string;
    /**
     * Information about the toolkit that provides this trigger
     */
    toolkit: TriggersTypeRetrieveResponse.Toolkit;
    /**
     * The trigger mechanism - either webhook (event-based) or poll (scheduled check)
     */
    type: 'webhook' | 'poll';
}
export declare namespace TriggersTypeRetrieveResponse {
    /**
     * Information about the toolkit that provides this trigger
     */
    interface Toolkit {
        /**
         * Logo of the toolkit
         */
        logo: string;
        /**
         * Deprecated: Use slug instead
         */
        name: string;
        /**
         * Unique identifier for the parent toolkit
         */
        slug: string;
    }
}
export interface TriggersTypeListResponse {
    current_page: number;
    items: Array<TriggersTypeListResponse.Item>;
    total_items: number;
    total_pages: number;
    next_cursor?: string | null;
}
export declare namespace TriggersTypeListResponse {
    interface Item {
        /**
         * Configuration schema required to set up this trigger
         */
        config: {
            [key: string]: unknown;
        };
        /**
         * Detailed description of what the trigger does
         */
        description: string;
        /**
         * Step-by-step instructions on how to set up and use this trigger
         */
        instructions: string;
        /**
         * Human-readable name of the trigger
         */
        name: string;
        /**
         * Schema of the data payload this trigger will deliver when it fires
         */
        payload: {
            [key: string]: unknown;
        };
        /**
         * Unique identifier for the trigger type
         */
        slug: string;
        /**
         * Information about the toolkit that provides this trigger
         */
        toolkit: Item.Toolkit;
        /**
         * The trigger mechanism - either webhook (event-based) or poll (scheduled check)
         */
        type: 'webhook' | 'poll';
    }
    namespace Item {
        /**
         * Information about the toolkit that provides this trigger
         */
        interface Toolkit {
            /**
             * Logo of the toolkit
             */
            logo: string;
            /**
             * Deprecated: Use slug instead
             */
            name: string;
            /**
             * Unique identifier for the parent toolkit
             */
            slug: string;
        }
    }
}
/**
 * JSON string containing all trigger enum values
 */
export type TriggersTypeRetrieveEnumResponse = string;
export interface TriggersTypeListParams {
    /**
     * Cursor for pagination. The cursor is a base64 encoded string of the page and
     * limit. The page is the page number and the limit is the number of items per
     * page. The cursor is used to paginate through the items. The cursor is not
     * required for the first page.
     */
    cursor?: string;
    /**
     * Number of items per page
     */
    limit?: number | null;
    /**
     * Array of toolkit slugs to filter triggers by
     */
    toolkit_slugs?: Array<string> | null;
}
export declare namespace TriggersTypes {
    export { type TriggersTypeRetrieveResponse as TriggersTypeRetrieveResponse, type TriggersTypeListResponse as TriggersTypeListResponse, type TriggersTypeRetrieveEnumResponse as TriggersTypeRetrieveEnumResponse, type TriggersTypeListParams as TriggersTypeListParams, };
}
//# sourceMappingURL=triggers-types.d.mts.map