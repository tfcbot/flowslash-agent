import { APIResource } from "../core/resource.js";
import { APIPromise } from "../core/api-promise.js";
import { RequestOptions } from "../internal/request-options.js";
export declare class Tools extends APIResource {
    /**
     * Retrieve detailed information about a specific tool using its slug identifier.
     * This endpoint returns full metadata about a tool including input/output
     * parameters, versions, and toolkit information.
     *
     * @example
     * ```ts
     * const tool = await client.tools.retrieve('tool_slug');
     * ```
     */
    retrieve(toolSlug: string, options?: RequestOptions): APIPromise<ToolRetrieveResponse>;
    /**
     * Retrieve a paginated list of available tools with comprehensive filtering,
     * sorting and search capabilities. Use query parameters to narrow down results by
     * toolkit, tags, or search terms.
     *
     * @example
     * ```ts
     * const tools = await client.tools.list();
     * ```
     */
    list(query?: ToolListParams | null | undefined, options?: RequestOptions): APIPromise<ToolListResponse>;
    /**
     * Execute a specific tool operation with provided arguments and authentication.
     * This is the primary endpoint for integrating with third-party services and
     * executing tools. You can provide structured arguments or use natural language
     * processing by providing a text description of what you want to accomplish.
     *
     * @example
     * ```ts
     * const response = await client.tools.execute('tool_slug');
     * ```
     */
    execute(toolSlug: string, body?: ToolExecuteParams | null | undefined, options?: RequestOptions): APIPromise<ToolExecuteResponse>;
    /**
     * Uses AI to translate a natural language description into structured arguments
     * for a specific tool. This endpoint is useful when you want to let users describe
     * what they want to do in plain language instead of providing structured
     * parameters.
     *
     * @example
     * ```ts
     * const response = await client.tools.getInput('tool_slug', {
     *   text: 'I need to trigger the main workflow in the octocat/Hello-World repository to deploy to production',
     * });
     * ```
     */
    getInput(toolSlug: string, body: ToolGetInputParams, options?: RequestOptions): APIPromise<ToolGetInputResponse>;
    /**
     * Proxy an HTTP request to a third-party API using connected account credentials.
     * This endpoint allows making authenticated API calls to external services while
     * abstracting away authentication details.
     *
     * @example
     * ```ts
     * const response = await client.tools.proxy({
     *   endpoint: '/api/v1/resources',
     *   method: 'GET',
     * });
     * ```
     */
    proxy(body: ToolProxyParams, options?: RequestOptions): APIPromise<ToolProxyResponse>;
    /**
     * Retrieve a list of all available tool enumeration values (tool slugs) for the
     * project. This endpoint returns a comma-separated string of tool slugs that can
     * be used in other API calls.
     *
     * @example
     * ```ts
     * const response = await client.tools.retrieveEnum();
     * ```
     */
    retrieveEnum(options?: RequestOptions): APIPromise<string>;
}
export interface ToolRetrieveResponse {
    /**
     * List of all available versions for this tool
     */
    available_versions: Array<string>;
    deprecated: ToolRetrieveResponse.Deprecated;
    /**
     * Detailed explanation of the tool's functionality and purpose
     */
    description: string;
    /**
     * Schema definition of required input parameters for the tool
     */
    input_parameters: {
        [key: string]: unknown;
    };
    /**
     * Human-readable display name of the tool
     */
    name: string;
    /**
     * Indicates if the tool can be used without authentication
     */
    no_auth: boolean;
    /**
     * Schema definition of return values from the tool
     */
    output_parameters: {
        [key: string]: unknown;
    };
    /**
     * List of scopes associated with the tool
     */
    scopes: Array<string>;
    /**
     * Unique identifier for the tool
     */
    slug: string;
    /**
     * List of tags associated with the tool for categorization and filtering
     */
    tags: Array<string>;
    toolkit: ToolRetrieveResponse.Toolkit;
    /**
     * Current version of the tool
     */
    version: string;
}
export declare namespace ToolRetrieveResponse {
    interface Deprecated {
        /**
         * List of all available versions for this tool
         */
        available_versions: Array<string>;
        /**
         * The display name of the tool
         */
        displayName: string;
        /**
         * Indicates if this tool is deprecated and may be removed in the future
         */
        is_deprecated: boolean;
        toolkit: Deprecated.Toolkit;
        /**
         * Current version identifier of the tool
         */
        version: string;
    }
    namespace Deprecated {
        interface Toolkit {
            /**
             * URL to the toolkit logo image
             */
            logo: string;
        }
    }
    interface Toolkit {
        /**
         * URL to the toolkit logo image
         */
        logo: string;
        /**
         * Human-readable name of the parent toolkit
         */
        name: string;
        /**
         * Unique identifier of the parent toolkit
         */
        slug: string;
    }
}
export interface ToolListResponse {
    current_page: number;
    items: Array<ToolListResponse.Item>;
    total_items: number;
    total_pages: number;
    next_cursor?: string | null;
}
export declare namespace ToolListResponse {
    interface Item {
        /**
         * List of all available versions for this tool
         */
        available_versions: Array<string>;
        deprecated: Item.Deprecated;
        /**
         * Detailed explanation of the tool's functionality and purpose
         */
        description: string;
        /**
         * Schema definition of required input parameters for the tool
         */
        input_parameters: {
            [key: string]: unknown;
        };
        /**
         * Human-readable display name of the tool
         */
        name: string;
        /**
         * Indicates if the tool can be used without authentication
         */
        no_auth: boolean;
        /**
         * Schema definition of return values from the tool
         */
        output_parameters: {
            [key: string]: unknown;
        };
        /**
         * List of scopes associated with the tool
         */
        scopes: Array<string>;
        /**
         * Unique identifier for the tool
         */
        slug: string;
        /**
         * List of tags associated with the tool for categorization and filtering
         */
        tags: Array<string>;
        toolkit: Item.Toolkit;
        /**
         * Current version of the tool
         */
        version: string;
    }
    namespace Item {
        interface Deprecated {
            /**
             * List of all available versions for this tool
             */
            available_versions: Array<string>;
            /**
             * The display name of the tool
             */
            displayName: string;
            /**
             * Indicates if this tool is deprecated and may be removed in the future
             */
            is_deprecated: boolean;
            toolkit: Deprecated.Toolkit;
            /**
             * Current version identifier of the tool
             */
            version: string;
        }
        namespace Deprecated {
            interface Toolkit {
                /**
                 * URL to the toolkit logo image
                 */
                logo: string;
            }
        }
        interface Toolkit {
            /**
             * URL to the toolkit logo image
             */
            logo: string;
            /**
             * Human-readable name of the parent toolkit
             */
            name: string;
            /**
             * Unique identifier of the parent toolkit
             */
            slug: string;
        }
    }
}
export interface ToolExecuteResponse {
    /**
     * Tool execution output data that varies based on the specific tool
     */
    data: {
        [key: string]: unknown;
    };
    /**
     * Error message if the tool execution was not successful (null if successful)
     */
    error: string | null;
    /**
     * Indicates if the tool execution was successful
     */
    successful: boolean;
    /**
     * Unique identifier for the execution log (useful for debugging and support)
     */
    log_id?: string;
    /**
     * Optional session information for tools that return session context
     */
    session_info?: unknown;
}
export interface ToolGetInputResponse {
    /**
     * Key-value pairs of arguments required by the tool to accomplish the described
     * task
     */
    arguments?: {
        [key: string]: unknown;
    };
    /**
     * Error message if the arguments could not be generated (null if successful)
     */
    error?: string;
}
export interface ToolProxyResponse {
    /**
     * The HTTP status code returned from the proxied API
     */
    status: number;
    /**
     * The response data returned from the proxied API
     */
    data?: unknown;
    /**
     * The HTTP headers returned from the proxied API
     */
    headers?: {
        [key: string]: string;
    };
}
/**
 * Comma-separated list of tool slugs available to the project
 */
export type ToolRetrieveEnumResponse = string;
export interface ToolListParams {
    /**
     * Filter tools by auth config id
     */
    auth_config_ids?: Array<string> | null;
    /**
     * Cursor for pagination. The cursor is a base64 encoded string of the page and
     * limit. The page is the page number and the limit is the number of items per
     * page. The cursor is used to paginate through the items. The cursor is not
     * required for the first page.
     */
    cursor?: string;
    /**
     * Filter to only show important/featured tools (set to "true" to enable)
     */
    important?: 'true' | 'false';
    /**
     * Include deprecated tools in the response
     */
    include_deprecated?: boolean;
    /**
     * Number of items per page
     */
    limit?: number | null;
    /**
     * Array of scopes to filter tools by)
     */
    scopes?: Array<string> | null;
    /**
     * Free-text search query to find tools by name, description, or functionality
     */
    search?: string;
    /**
     * Filter tools by one or more tags (can be specified multiple times)
     */
    tags?: Array<string>;
    /**
     * Comma-separated list of specific tool slugs to retrieve (overrides other
     * filters)
     */
    tool_slugs?: string;
    /**
     * The slug of the toolkit to filter by
     */
    toolkit_slug?: string;
}
export interface ToolExecuteParams {
    /**
     * Enable debug tracing for tool execution (useful for debugging)
     */
    allow_tracing?: boolean | null;
    /**
     * Key-value pairs of arguments required by the tool (mutually exclusive with text)
     */
    arguments?: {
        [key: string]: unknown;
    };
    /**
     * Unique identifier for the connected account to use for authentication
     */
    connected_account_id?: string;
    /**
     * Custom authentication parameters for tools that support parameterized
     * authentication
     */
    custom_auth_params?: ToolExecuteParams.CustomAuthParams;
    /**
     * Custom connection data for tools that support custom connection data
     */
    custom_connection_data?: ToolExecuteParams.UnionMember0 | ToolExecuteParams.UnionMember1 | ToolExecuteParams.UnionMember2 | ToolExecuteParams.UnionMember3 | ToolExecuteParams.UnionMember4 | ToolExecuteParams.UnionMember5 | ToolExecuteParams.UnionMember6;
    /**
     * Natural language description of the task to perform (mutually exclusive with
     * arguments)
     */
    text?: string;
    /**
     * User id for multi-user connected accounts (e.g. multiple users, organizations)
     */
    user_id?: string;
    /**
     * Tool version to execute (defaults to "latest" if not specified)
     */
    version?: string;
}
export declare namespace ToolExecuteParams {
    /**
     * Custom authentication parameters for tools that support parameterized
     * authentication
     */
    interface CustomAuthParams {
        /**
         * The base URL (root address) what you should use while making http requests to
         * the connected account. For example, for gmail, it would be
         * 'https://gmail.googleapis.com'
         */
        base_url?: string;
        /**
         * The body to be sent to the endpoint for authentication. This is a JSON object.
         * Note: This is very rarely needed and is only required by very few apps.
         */
        body?: {
            [key: string]: unknown;
        };
        parameters?: Array<CustomAuthParams.Parameter>;
    }
    namespace CustomAuthParams {
        interface Parameter {
            /**
             * The location of the parameter. Can be 'query' or 'header'.
             */
            in: 'query' | 'header';
            /**
             * The name of the parameter. For example, 'x-api-key', 'Content-Type', etc.
             */
            name: string;
            /**
             * The value of the parameter. For example, '1234567890', 'application/json', etc.
             */
            value: string | number;
        }
    }
    interface UnionMember0 {
        authScheme: 'OAUTH2';
        toolkitSlug: string;
        val: UnionMember0.Val;
    }
    namespace UnionMember0 {
        interface Val {
            access_token: string;
            account_id?: string;
            account_url?: string;
            api_url?: string;
            /**
             * for slack user scopes
             */
            authed_user?: Val.AuthedUser;
            base_url?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            expires_in?: number | string | null;
            extension?: string;
            form_api_base_url?: string;
            id_token?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            /**
             * Whether to return the redirect url without shortening
             */
            long_redirect_url?: boolean;
            proxy_password?: string;
            proxy_username?: string;
            refresh_token?: string | null;
            region?: string;
            scope?: string | Array<string> | null;
            server_location?: string;
            shop?: string;
            site_name?: string;
            /**
             * The oauth2 state prefix for the connection
             */
            state_prefix?: string;
            subdomain?: string;
            token_type?: string;
            version?: string;
            webhook_signature?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
        namespace Val {
            /**
             * for slack user scopes
             */
            interface AuthedUser {
                access_token?: string;
                scope?: string;
            }
        }
    }
    interface UnionMember1 {
        authScheme: 'API_KEY';
        toolkitSlug: string;
        val: UnionMember1.Val;
    }
    namespace UnionMember1 {
        interface Val {
            account_id?: string;
            account_url?: string;
            api_key?: string;
            api_url?: string;
            base_url?: string;
            basic_encoded?: string;
            bearer_token?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            generic_api_key?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            proxy_password?: string;
            proxy_username?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
    interface UnionMember2 {
        authScheme: 'BASIC_WITH_JWT';
        toolkitSlug: string;
        val: UnionMember2.Val;
    }
    namespace UnionMember2 {
        interface Val {
            password: string;
            username: string;
            account_id?: string;
            account_url?: string;
            api_url?: string;
            base_url?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            proxy_password?: string;
            proxy_username?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
    interface UnionMember3 {
        authScheme: 'BASIC';
        toolkitSlug: string;
        val: UnionMember3.Val;
    }
    namespace UnionMember3 {
        interface Val {
            password: string;
            username: string;
            account_id?: string;
            account_url?: string;
            api_url?: string;
            base_url?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            proxy_password?: string;
            proxy_username?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
    interface UnionMember4 {
        authScheme: 'BEARER_TOKEN';
        toolkitSlug: string;
        val: UnionMember4.Val;
    }
    namespace UnionMember4 {
        interface Val {
            token: string;
            account_id?: string;
            account_url?: string;
            api_url?: string;
            base_url?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            proxy_password?: string;
            proxy_username?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
    interface UnionMember5 {
        authScheme: 'OAUTH1';
        toolkitSlug: string;
        val: UnionMember5.Val;
    }
    namespace UnionMember5 {
        interface Val {
            oauth_token: string;
            oauth_token_secret: string;
            account_id?: string;
            account_url?: string;
            api_url?: string;
            base_url?: string;
            borneo_dashboard_url?: string;
            callback_url?: string;
            COMPANYDOMAIN?: string;
            consumer_key?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            oauth_verifier?: string;
            proxy_password?: string;
            proxy_username?: string;
            redirectUrl?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
    interface UnionMember6 {
        authScheme: 'NO_AUTH';
        toolkitSlug: string;
        val: UnionMember6.Val;
    }
    namespace UnionMember6 {
        interface Val {
            account_id?: string;
            account_url?: string;
            api_url?: string;
            base_url?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            proxy_password?: string;
            proxy_username?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
}
export interface ToolGetInputParams {
    /**
     * Natural language description of what you want to accomplish with this tool
     */
    text: string;
    /**
     * Custom description of the tool to help guide the LLM in generating more accurate
     * inputs
     */
    custom_description?: string;
    /**
     * System prompt to control and guide the behavior of the LLM when generating
     * inputs
     */
    system_prompt?: string;
    /**
     * Tool version to use when generating inputs (defaults to "latest" if not
     * specified)
     */
    version?: string;
}
export interface ToolProxyParams {
    /**
     * The API endpoint to call (absolute URL or path relative to base URL of the
     * connected account)
     */
    endpoint: string;
    /**
     * The HTTP method to use for the request
     */
    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD';
    /**
     * The request body (for POST, PUT, and PATCH requests)
     */
    body?: unknown;
    /**
     * The ID of the connected account to use for authentication (if not provided, will
     * use the default account for the project)
     */
    connected_account_id?: string;
    custom_connection_data?: ToolProxyParams.UnionMember0 | ToolProxyParams.UnionMember1 | ToolProxyParams.UnionMember2 | ToolProxyParams.UnionMember3 | ToolProxyParams.UnionMember4 | ToolProxyParams.UnionMember5 | ToolProxyParams.UnionMember6;
    /**
     * Additional HTTP headers or query parameters to include in the request
     */
    parameters?: Array<ToolProxyParams.Parameter>;
}
export declare namespace ToolProxyParams {
    interface UnionMember0 {
        authScheme: 'OAUTH2';
        toolkitSlug: string;
        val: UnionMember0.Val;
    }
    namespace UnionMember0 {
        interface Val {
            access_token: string;
            account_id?: string;
            account_url?: string;
            api_url?: string;
            /**
             * for slack user scopes
             */
            authed_user?: Val.AuthedUser;
            base_url?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            expires_in?: number | string | null;
            extension?: string;
            form_api_base_url?: string;
            id_token?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            /**
             * Whether to return the redirect url without shortening
             */
            long_redirect_url?: boolean;
            proxy_password?: string;
            proxy_username?: string;
            refresh_token?: string | null;
            region?: string;
            scope?: string | Array<string> | null;
            server_location?: string;
            shop?: string;
            site_name?: string;
            /**
             * The oauth2 state prefix for the connection
             */
            state_prefix?: string;
            subdomain?: string;
            token_type?: string;
            version?: string;
            webhook_signature?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
        namespace Val {
            /**
             * for slack user scopes
             */
            interface AuthedUser {
                access_token?: string;
                scope?: string;
            }
        }
    }
    interface UnionMember1 {
        authScheme: 'API_KEY';
        toolkitSlug: string;
        val: UnionMember1.Val;
    }
    namespace UnionMember1 {
        interface Val {
            account_id?: string;
            account_url?: string;
            api_key?: string;
            api_url?: string;
            base_url?: string;
            basic_encoded?: string;
            bearer_token?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            generic_api_key?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            proxy_password?: string;
            proxy_username?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
    interface UnionMember2 {
        authScheme: 'BASIC_WITH_JWT';
        toolkitSlug: string;
        val: UnionMember2.Val;
    }
    namespace UnionMember2 {
        interface Val {
            password: string;
            username: string;
            account_id?: string;
            account_url?: string;
            api_url?: string;
            base_url?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            proxy_password?: string;
            proxy_username?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
    interface UnionMember3 {
        authScheme: 'BASIC';
        toolkitSlug: string;
        val: UnionMember3.Val;
    }
    namespace UnionMember3 {
        interface Val {
            password: string;
            username: string;
            account_id?: string;
            account_url?: string;
            api_url?: string;
            base_url?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            proxy_password?: string;
            proxy_username?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
    interface UnionMember4 {
        authScheme: 'BEARER_TOKEN';
        toolkitSlug: string;
        val: UnionMember4.Val;
    }
    namespace UnionMember4 {
        interface Val {
            token: string;
            account_id?: string;
            account_url?: string;
            api_url?: string;
            base_url?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            proxy_password?: string;
            proxy_username?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
    interface UnionMember5 {
        authScheme: 'OAUTH1';
        toolkitSlug: string;
        val: UnionMember5.Val;
    }
    namespace UnionMember5 {
        interface Val {
            oauth_token: string;
            oauth_token_secret: string;
            account_id?: string;
            account_url?: string;
            api_url?: string;
            base_url?: string;
            borneo_dashboard_url?: string;
            callback_url?: string;
            COMPANYDOMAIN?: string;
            consumer_key?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            oauth_verifier?: string;
            proxy_password?: string;
            proxy_username?: string;
            redirectUrl?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
    interface UnionMember6 {
        authScheme: 'NO_AUTH';
        toolkitSlug: string;
        val: UnionMember6.Val;
    }
    namespace UnionMember6 {
        interface Val {
            account_id?: string;
            account_url?: string;
            api_url?: string;
            base_url?: string;
            borneo_dashboard_url?: string;
            COMPANYDOMAIN?: string;
            dc?: string;
            domain?: string;
            extension?: string;
            form_api_base_url?: string;
            instanceEndpoint?: string;
            instanceName?: string;
            proxy_password?: string;
            proxy_username?: string;
            region?: string;
            server_location?: string;
            shop?: string;
            site_name?: string;
            subdomain?: string;
            version?: string;
            your_server?: string;
            'your-domain'?: string;
            [k: string]: unknown;
        }
    }
    interface Parameter {
        /**
         * Parameter name
         */
        name: string;
        /**
         * Parameter type (header or query)
         */
        type: 'header' | 'query';
        /**
         * Parameter value
         */
        value: string;
    }
}
export declare namespace Tools {
    export { type ToolRetrieveResponse as ToolRetrieveResponse, type ToolListResponse as ToolListResponse, type ToolExecuteResponse as ToolExecuteResponse, type ToolGetInputResponse as ToolGetInputResponse, type ToolProxyResponse as ToolProxyResponse, type ToolRetrieveEnumResponse as ToolRetrieveEnumResponse, type ToolListParams as ToolListParams, type ToolExecuteParams as ToolExecuteParams, type ToolGetInputParams as ToolGetInputParams, type ToolProxyParams as ToolProxyParams, };
}
//# sourceMappingURL=tools.d.ts.map