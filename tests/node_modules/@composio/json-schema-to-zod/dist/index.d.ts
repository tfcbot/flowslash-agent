import { ZodTypeAny, z } from 'zod';
import { JSONSchema7 } from 'json-schema';

type Serializable = {
    [key: string]: Serializable;
} | Serializable[] | string | number | boolean | null;
type JsonSchema = JsonSchemaObject | boolean;
type JsonSchemaObject = JSONSchema7;
type ParserSelector = (schema: JsonSchemaObject, refs: Refs) => ZodTypeAny;
type ParserOverride = (schema: JsonSchemaObject, refs: Refs) => ZodTypeAny | undefined;
type JsonSchemaToZodOptions = {
    withoutDefaults?: boolean;
    withoutDescribes?: boolean;
    parserOverride?: ParserOverride;
    depth?: number;
};
type Refs = JsonSchemaToZodOptions & {
    path: Array<string | number>;
    seen: Map<object | boolean, {
        n: number;
        r: ZodTypeAny | undefined;
    }>;
};

declare const jsonSchemaToZod: (schema: JsonSchema, options?: JsonSchemaToZodOptions) => z.ZodType;

export { type JsonSchema, type JsonSchemaObject, type JsonSchemaToZodOptions, type ParserOverride, type ParserSelector, type Refs, type Serializable, jsonSchemaToZod };
